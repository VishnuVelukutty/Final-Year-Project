{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Tz299naib-Ov"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import sklearn\n",
        "import re, string\n",
        "import tweepy\n",
        "import nltk\n",
        "import random\n",
        "nltk.download('all')\n",
        "\n",
        "\n",
        "from nltk.tokenize import TweetTokenizer\n",
        "\n",
        "\n",
        "from textblob import TextBlob\n",
        "from tweepy import OAuthHandler\n",
        "\n",
        "from google.colab import drive\n",
        "\n",
        "\n",
        "from time import time\n",
        "from nltk import classify\n",
        "\n",
        "from nltk.tag import pos_tag\n",
        "from nltk.stem.wordnet import WordNetLemmatizer\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from nltk import NaiveBayesClassifier\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pSi3Pt41cDrp",
        "outputId": "5fc611c8-7214-49e9-8007-655c77878569"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Positive tweets percentage: 31.08108108108108 %\n",
            "Negative tweets percentage: 24.324324324324323 %\n",
            "Neutral tweets percentage: 44.5945945945946 %       \n",
            "\n",
            "\n",
            "Positive tweets:\n",
            "@KremlinRussia_E President Putin of  russia  is  on right path in ukraine war . We are with you  .\n",
            "As bombs fall on Ukraine, many European governments are waking up to the sorry state of their own civil defenses. https://t.co/4oOJThCACp\n",
            "RT @washingtonpost: A tremendous surge in VPN downloads in Russia represents a challenge to Putin and his version of the Ukraine war. \n",
            "http…\n",
            "@russelljh @FAO_Peripateric @jeffreymparsons @Abulinixish @RT_com If Putin really wanted a war 😂 he would have done… https://t.co/SJLO4H1sZ5\n",
            "RT @katierogers: “We understand what it takes for the U.S. First Lady to come here during a war, where the military actions are taking plac…\n",
            "RT @Jumpmasterpsg: Ok...Russia or Ukraine???  With Pelosi, Schumer, and Jill walking around in a \"war\" zone....something ain't right.  If t…\n",
            "RT @thehill: Jill Biden pays surprise visit to Ukraine, meets first lady https://t.co/RkpN8liE7V https://t.co/tN8LsTVGMa\n",
            "RT @anders_aslund: Observations on Russia's war in Ukraine.\n",
            "1. In spite of 3 weeks of intense Russian attacks in Donbas, the front has bare…\n",
            "RT @B52Malmet: Zelenskyy thanked Biden for her “courageous act” and said, “We understand what it takes for the U.S. first lady to come here…\n",
            "RT @Delaney_Magic: German Chancellor Olaf Scholz warned that the Russia-Ukraine war would have consequences for food supply, potentially le…\n",
            "\n",
            "\n",
            "Negative tweets:\n",
            "RT @SpencerGuard: There is only a few hours to Russia's “Victory Day” parade &amp; Putin's speech (noon in Moscow). There can only be lies. Put…\n",
            "RT @AlexKokcharov: In 77 out of 83 regions of #Russia, there are wildfires reported. The worst fires are in #Siberia, destroying entire vil…\n",
            "The media &amp; governments of Ukraine, the US &amp; EU would like you to note the “slow progress” of Russian advances in U… https://t.co/LL3s3KNaM2\n",
            "RT @SecBlinken: Russia's forces have committed war crimes in Ukraine, killed thousands of civilians, and created a humanitarian catastrophe…\n",
            "@JoshRosner @mfa_russia If you believe Ukrainian propaganda, then Gerasimov has been shot down by Ukraine. You beli… https://t.co/n4JSZ4jQC0\n",
            "@RepAdamSchiff Also today, Americans are being subjugated to an ideology being forced upon them by foreign intruder… https://t.co/NALIuKl3F3\n",
            "RT @japantimes: About 60 people were feared dead after a bomb struck a school in eastern Ukraine, authorities said, while Russia prepared f…\n",
            "Zelensky says ‘evil has returned’ after Russia bombs school - follow live https://t.co/WwAfSXL3bR\n",
            "RT @nytimes: Dozens of people are feared dead after a Russian airstrike leveled a school in eastern Ukraine. If the death toll is as high a…\n",
            "RT @ivan_8848: Ukraine Alone Makes Biden The Worst US President In A Long Time\n",
            "\n",
            "“We’re not just at war to support the Ukrainians. We’re fun…\n"
          ]
        }
      ],
      "source": [
        "class TwitterClient(object):\n",
        "  def __init__(self):\n",
        "    consumer_key = ''\n",
        "    consumer_secret = ''\n",
        "    access_token = ''\n",
        "    access_token_secret = ''\n",
        "    try:\n",
        "      self.auth = OAuthHandler(consumer_key, consumer_secret)\n",
        "      self.auth.set_access_token(access_token, access_token_secret)\n",
        "      self.api = tweepy.API(self.auth)\n",
        "    except:\n",
        "      print(\"Error: Authentication Failed\")\n",
        "\n",
        "  def clean_tweet(self, tweet):\n",
        "    return ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\/\\/\\S+)\", \" \", tweet).split())\n",
        "\n",
        "  def get_tweet_sentiment(self, tweet):\n",
        "    analysis = TextBlob(self.clean_tweet(tweet))\n",
        "    if analysis.sentiment.polarity > 0:\n",
        "      return 'positive'\n",
        "    elif analysis.sentiment.polarity == 0:\n",
        "      return 'neutral'\n",
        "    else:\n",
        "      return 'negative'\n",
        "\n",
        "  def get_tweets(self, query, count=100):\n",
        "    tweets =[]\n",
        "    try:\n",
        "      fetched_tweets = self.api.search(q = query, count = count)\n",
        "      for tweet in fetched_tweets:\n",
        "        parsed_tweet ={}\n",
        "        parsed_tweet['text'] = tweet.text\n",
        "        parsed_tweet['sentiment'] = self.get_tweet_sentiment(tweet.text)\n",
        "        if tweet.retweet_count > 0:\n",
        "          if parsed_tweet not in tweets:\n",
        "            tweets.append(parsed_tweet)\n",
        "        else:\n",
        "          tweets.append(parsed_tweet)\n",
        "      return tweets\n",
        "    except tweepy.TweepError as e:\n",
        "      print(\"Error : \" + str(e))\n",
        "\n",
        "\n",
        "\n",
        "def main():\n",
        "  api = TwitterClient()\n",
        "  tweets = api.get_tweets(query = 'Russia Ukraine War', count = 10000)\n",
        "\n",
        "  ptweets = [tweet for tweet in tweets if tweet['sentiment'] == 'positive']\n",
        "  print(\"Positive tweets percentage: {} %\".format(100*len(ptweets)/len(tweets)))\n",
        "\n",
        "  ntweets = [tweet for tweet in tweets if tweet['sentiment'] == 'negative']\n",
        "  print(\"Negative tweets percentage: {} %\".format(100*len(ntweets)/len(tweets)))\n",
        "\n",
        "  print(\"Neutral tweets percentage: {} % \\\n",
        "      \".format(100*(len(tweets) -(len( ntweets )+len( ptweets)))/len(tweets)))\n",
        "\n",
        "  print(\"\\n\\nPositive tweets:\")\n",
        "  for tweet in ptweets[:10]:\n",
        "    print(tweet['text'])\n",
        "\n",
        "  print(\"\\n\\nNegative tweets:\")\n",
        "  for tweet in ntweets[:10]:\n",
        "    print(tweet['text'])\n",
        "\n",
        "  db=pd.DataFrame(tweets)\n",
        "  filename='tweets_scraped_testing.csv'\n",
        "  db.to_csv(filename)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  main()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lgL_PSZV4OU5"
      },
      "source": [
        "## Training the Naive Bayes using dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vy_m9BaCqmCp",
        "outputId": "21d4f767-3eb0-444d-c067-210d85028d57"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FiwEeHrFq1gV"
      },
      "outputs": [],
      "source": [
        "df=pd.read_csv(\"/content/drive/MyDrive/Russia_invade.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "Z3NUnKBrr_bj",
        "outputId": "39629446-a713-4ba6-e689-ffc73772ae5d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-5bd91806-2315-4343-8cbc-725283c57cdf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>_type</th>\n",
              "      <th>url</th>\n",
              "      <th>date</th>\n",
              "      <th>content</th>\n",
              "      <th>renderedContent</th>\n",
              "      <th>id</th>\n",
              "      <th>user</th>\n",
              "      <th>replyCount</th>\n",
              "      <th>retweetCount</th>\n",
              "      <th>likeCount</th>\n",
              "      <th>...</th>\n",
              "      <th>retweetedTweet</th>\n",
              "      <th>quotedTweet</th>\n",
              "      <th>inReplyToTweetId</th>\n",
              "      <th>inReplyToUser</th>\n",
              "      <th>mentionedUsers</th>\n",
              "      <th>coordinates</th>\n",
              "      <th>place</th>\n",
              "      <th>hashtags</th>\n",
              "      <th>cashtags</th>\n",
              "      <th>Searh</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>snscrape.modules.twitter.Tweet</td>\n",
              "      <td>https://twitter.com/pat_ianni/status/150025982...</td>\n",
              "      <td>2022-03-05 23:59:50+00:00</td>\n",
              "      <td>JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE ...</td>\n",
              "      <td>JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE ...</td>\n",
              "      <td>1500259827154505728</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>14</td>\n",
              "      <td>26</td>\n",
              "      <td>99</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Russia invade</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>snscrape.modules.twitter.Tweet</td>\n",
              "      <td>https://twitter.com/luxeprogressive/status/150...</td>\n",
              "      <td>2022-03-05 23:59:05+00:00</td>\n",
              "      <td>@ProfPaulPoast He doesn’t have to like it but ...</td>\n",
              "      <td>@ProfPaulPoast He doesn’t have to like it but ...</td>\n",
              "      <td>1500259636863246336</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.500259e+18</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Russia invade</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>snscrape.modules.twitter.Tweet</td>\n",
              "      <td>https://twitter.com/spielblog/status/150025947...</td>\n",
              "      <td>2022-03-05 23:58:26+00:00</td>\n",
              "      <td>@SemproniusT @RichardHanania And if NATO is th...</td>\n",
              "      <td>@SemproniusT @RichardHanania And if NATO is th...</td>\n",
              "      <td>1500259474040180738</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.500259e+18</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Russia invade</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>snscrape.modules.twitter.Tweet</td>\n",
              "      <td>https://twitter.com/JumboSlunce/status/1500259...</td>\n",
              "      <td>2022-03-05 23:58:20+00:00</td>\n",
              "      <td>@jakehase @Groutandgo @MysticAura_ @SkylarJord...</td>\n",
              "      <td>@jakehase @Groutandgo @MysticAura_ @SkylarJord...</td>\n",
              "      <td>1500259447742115841</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.500248e+18</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Russia invade</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>snscrape.modules.twitter.Tweet</td>\n",
              "      <td>https://twitter.com/ronanmcmanus/status/150025...</td>\n",
              "      <td>2022-03-05 23:58:17+00:00</td>\n",
              "      <td>@2_4_5T_2_4_D @carolecadwalla @estellecostanza...</td>\n",
              "      <td>@2_4_5T_2_4_D @carolecadwalla @estellecostanza...</td>\n",
              "      <td>1500259435142340608</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.500258e+18</td>\n",
              "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
              "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Russia invade</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 29 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5bd91806-2315-4343-8cbc-725283c57cdf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5bd91806-2315-4343-8cbc-725283c57cdf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5bd91806-2315-4343-8cbc-725283c57cdf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                            _type  \\\n",
              "0  snscrape.modules.twitter.Tweet   \n",
              "1  snscrape.modules.twitter.Tweet   \n",
              "2  snscrape.modules.twitter.Tweet   \n",
              "3  snscrape.modules.twitter.Tweet   \n",
              "4  snscrape.modules.twitter.Tweet   \n",
              "\n",
              "                                                 url  \\\n",
              "0  https://twitter.com/pat_ianni/status/150025982...   \n",
              "1  https://twitter.com/luxeprogressive/status/150...   \n",
              "2  https://twitter.com/spielblog/status/150025947...   \n",
              "3  https://twitter.com/JumboSlunce/status/1500259...   \n",
              "4  https://twitter.com/ronanmcmanus/status/150025...   \n",
              "\n",
              "                        date  \\\n",
              "0  2022-03-05 23:59:50+00:00   \n",
              "1  2022-03-05 23:59:05+00:00   \n",
              "2  2022-03-05 23:58:26+00:00   \n",
              "3  2022-03-05 23:58:20+00:00   \n",
              "4  2022-03-05 23:58:17+00:00   \n",
              "\n",
              "                                             content  \\\n",
              "0  JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE ...   \n",
              "1  @ProfPaulPoast He doesn’t have to like it but ...   \n",
              "2  @SemproniusT @RichardHanania And if NATO is th...   \n",
              "3  @jakehase @Groutandgo @MysticAura_ @SkylarJord...   \n",
              "4  @2_4_5T_2_4_D @carolecadwalla @estellecostanza...   \n",
              "\n",
              "                                     renderedContent                   id  \\\n",
              "0  JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE ...  1500259827154505728   \n",
              "1  @ProfPaulPoast He doesn’t have to like it but ...  1500259636863246336   \n",
              "2  @SemproniusT @RichardHanania And if NATO is th...  1500259474040180738   \n",
              "3  @jakehase @Groutandgo @MysticAura_ @SkylarJord...  1500259447742115841   \n",
              "4  @2_4_5T_2_4_D @carolecadwalla @estellecostanza...  1500259435142340608   \n",
              "\n",
              "                                                user  replyCount  \\\n",
              "0  {'_type': 'snscrape.modules.twitter.User', 'us...          14   \n",
              "1  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
              "2  {'_type': 'snscrape.modules.twitter.User', 'us...           1   \n",
              "3  {'_type': 'snscrape.modules.twitter.User', 'us...           1   \n",
              "4  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
              "\n",
              "   retweetCount  likeCount  ...  retweetedTweet  quotedTweet inReplyToTweetId  \\\n",
              "0            26         99  ...             NaN          NaN              NaN   \n",
              "1             0          2  ...             NaN          NaN     1.500259e+18   \n",
              "2             0          0  ...             NaN          NaN     1.500259e+18   \n",
              "3             0          0  ...             NaN          NaN     1.500248e+18   \n",
              "4             0          0  ...             NaN          NaN     1.500258e+18   \n",
              "\n",
              "                                       inReplyToUser  \\\n",
              "0                                                NaN   \n",
              "1  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
              "2  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
              "3  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
              "4  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
              "\n",
              "                                      mentionedUsers coordinates place  \\\n",
              "0                                                NaN         NaN   NaN   \n",
              "1  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
              "2  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
              "3  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
              "4  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
              "\n",
              "  hashtags cashtags          Searh  \n",
              "0      NaN      NaN  Russia invade  \n",
              "1      NaN      NaN  Russia invade  \n",
              "2      NaN      NaN  Russia invade  \n",
              "3      NaN      NaN  Russia invade  \n",
              "4      NaN      NaN  Russia invade  \n",
              "\n",
              "[5 rows x 29 columns]"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9Dzd1duNsRtj"
      },
      "outputs": [],
      "source": [
        "content_df=df[['content']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "r34NyG9cs-wJ"
      },
      "outputs": [],
      "source": [
        "render_df=df[['renderedContent']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QN_irZkXxVsV"
      },
      "outputs": [],
      "source": [
        "checker=(content_df['content']==render_df['renderedContent'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "85ahseU-AlWF",
        "outputId": "7dc1c188-b43d-4340-c66e-f77666b22579"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0          True\n",
              "1          True\n",
              "2          True\n",
              "3          True\n",
              "4          True\n",
              "          ...  \n",
              "170830     True\n",
              "170831     True\n",
              "170832    False\n",
              "170833    False\n",
              "170834     True\n",
              "Length: 170835, dtype: bool"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "checker"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8Jj7zTmE0wrK"
      },
      "outputs": [],
      "source": [
        "tf=checker.reset_index()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "YvEoL5Ef6qLG",
        "outputId": "a1cbf0d2-a59e-43fc-edcf-b34fe5472671"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-82d3877e-13b6-48b2-a3c7-05b0a2985f45\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>False</th>\n",
              "      <td>39301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>True</th>\n",
              "      <td>131534</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82d3877e-13b6-48b2-a3c7-05b0a2985f45')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-82d3877e-13b6-48b2-a3c7-05b0a2985f45 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-82d3877e-13b6-48b2-a3c7-05b0a2985f45');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "        index\n",
              "0            \n",
              "False   39301\n",
              "True   131534"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tf.groupby([0]).count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5dBUXiPB7HOJ",
        "outputId": "803b55de-dc66-49fd-a446-6fad5ea77939"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: Passing a negative integer is deprecated in version 1.0 and will not be supported in future version. Instead, use None to not limit the column width.\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        }
      ],
      "source": [
        "pd.set_option('display.max_colwidth', -1)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-z5W9bXpEmuw",
        "outputId": "88932869-c544-4260-953e-263d36dd5a3c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "content    Yes! For sure. Standing up for America. He would never have left anyone in Afghanistan. Russia wouldn't invade...well anyone. No one would mess with Isreal. They would be too afraid of the firestorm that would rain down. https://t.co/FjmI9WG5ze\n",
              "Name: 170832, dtype: object"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "content_df.iloc[170832]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kts85cok7p-i",
        "outputId": "c95e82a3-f980-4cfb-d00f-a0a35692b68d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "renderedContent    Yes! For sure. Standing up for America. He would never have left anyone in Afghanistan. Russia wouldn't invade...well anyone. No one would mess with Isreal. They would be too afraid of the firestorm that would rain down. twitter.com/SebGorka/statu…\n",
              "Name: 170832, dtype: object"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "render_df.iloc[170832]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sASMfauy-ALQ"
      },
      "source": [
        "### Since the objects in rendered content is has strings instead of links we will use that dataframe"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3y3RjiWr_miR"
      },
      "outputs": [],
      "source": [
        "tweets_df=render_df['renderedContent'].apply(lambda tweet: TextBlob(tweet).sentiment)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6bXqhvfidFta"
      },
      "outputs": [],
      "source": [
        "result=render_df.merge(tweets_df,left_index=True,right_index=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 745
        },
        "id": "deXkf4uZeML4",
        "outputId": "a9e4fd06-b099-498e-cecd-3b42302fa8dc"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-8a1ba597-7c5d-4ff8-bbd0-3d43e3c7a411\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>renderedContent_x</th>\n",
              "      <th>renderedContent_y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE PUTIN DECIDES TO INVADE RUSSIA 🤣🤣🤣😭😭😂😂\\nPEOPLE VOTED FOR THIS GUY 🤣🤣🤣 https://t.co/FOHozS7vYI</td>\n",
              "      <td>(0.0, 0.0)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>@ProfPaulPoast He doesn’t have to like it but it’s up to those countries who are sovereign and now have a proven valid concern that he would invade again. Talk about “legitimate security concerns.” The only legitimate security concerns in this equation are from Ukraine/Russia’s neighbors.</td>\n",
              "      <td>(0.0, 1.0)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>@SemproniusT @RichardHanania And if NATO is the aggressor then maybe Russia should declare war on NATO. That would be a hoot! Instead they decided to invade a weaker neighbor unprovoked, and they aren’t finding it to be as much fun as they thought.</td>\n",
              "      <td>(0.3, 0.2)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>@jakehase @Groutandgo @MysticAura_ @SkylarJordan @AlexTyrrellPVQ Zelensky was not put in power by a coup. Ukraine doesn't want Russia in Ukraine. No one forced Russia to invade. Russia made a decision and now they're paying for it.</td>\n",
              "      <td>(-0.30000000000000004, 0.2)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>@2_4_5T_2_4_D @carolecadwalla @estellecostanza Or is your point that Ukraine asking NATO and the EU for help against Russia would have happened anyway (I mean, its not like Russia are going to invade Ukraine, right?)</td>\n",
              "      <td>(-0.01339285714285715, 0.6116071428571428)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170830</th>\n",
              "      <td>AS WE APPROACH 2022, PUTIN IS UNDER DOMESTIC PRESSURE, I THINK HE WILL INVADE UKRAINE,HE WILL PULL A JUNE 22ND, 1941 ( HITLER INVADING RUSSIA ! ) HOPING TO BUY TIME WE MAY HAVE A WW 3, HAPPY NEW YEAR PUTIN MAY GO BIOLOGICAL ALSO USING FOG OF WAR COVID 19 × 1000 IN POTENCY !</td>\n",
              "      <td>(0.3234848484848485, 0.5181818181818182)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170831</th>\n",
              "      <td>Prediction for this year Russia will invade Ukraine in January China will invade Twain in late spring or summer and Covid will still be here this time next year.</td>\n",
              "      <td>(-0.15, 0.3)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170832</th>\n",
              "      <td>Yes! For sure. Standing up for America. He would never have left anyone in Afghanistan. Russia wouldn't invade...well anyone. No one would mess with Isreal. They would be too afraid of the firestorm that would rain down. twitter.com/SebGorka/statu…</td>\n",
              "      <td>(-0.08611111111111111, 0.45055555555555554)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170833</th>\n",
              "      <td>#Russia owns #Cuba and #Venezuela. #Putin wants to own #Ukraine. A KGB always a KGB. Putin is a dictator, and dictators invade, nobody questions because 'mysteriously\" had an accident. twitter.com/AlCardenasFL_D… https://t.co/WqjXgZfJxy</td>\n",
              "      <td>(0.26666666666666666, 0.7000000000000001)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170834</th>\n",
              "      <td>@RALee85 No, Russia will go all the way. There is no partial solution to these. If they invade they will take all of Ukraine.\\n\\nBong</td>\n",
              "      <td>(0.05, 0.3)</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>170835 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a1ba597-7c5d-4ff8-bbd0-3d43e3c7a411')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8a1ba597-7c5d-4ff8-bbd0-3d43e3c7a411 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8a1ba597-7c5d-4ff8-bbd0-3d43e3c7a411');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                                                                                                                                                                                                                                                                        renderedContent_x  \\\n",
              "0       JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE PUTIN DECIDES TO INVADE RUSSIA 🤣🤣🤣😭😭😂😂\\nPEOPLE VOTED FOR THIS GUY 🤣🤣🤣 https://t.co/FOHozS7vYI                                                                                                                                                         \n",
              "1       @ProfPaulPoast He doesn’t have to like it but it’s up to those countries who are sovereign and now have a proven valid concern that he would invade again. Talk about “legitimate security concerns.” The only legitimate security concerns in this equation are from Ukraine/Russia’s neighbors.   \n",
              "2       @SemproniusT @RichardHanania And if NATO is the aggressor then maybe Russia should declare war on NATO. That would be a hoot! Instead they decided to invade a weaker neighbor unprovoked, and they aren’t finding it to be as much fun as they thought.                                            \n",
              "3       @jakehase @Groutandgo @MysticAura_ @SkylarJordan @AlexTyrrellPVQ Zelensky was not put in power by a coup. Ukraine doesn't want Russia in Ukraine. No one forced Russia to invade. Russia made a decision and now they're paying for it.                                                             \n",
              "4       @2_4_5T_2_4_D @carolecadwalla @estellecostanza Or is your point that Ukraine asking NATO and the EU for help against Russia would have happened anyway (I mean, its not like Russia are going to invade Ukraine, right?)                                                                            \n",
              "...                                                                                                                                                                                                                          ...                                                                            \n",
              "170830  AS WE APPROACH 2022, PUTIN IS UNDER DOMESTIC PRESSURE, I THINK HE WILL INVADE UKRAINE,HE WILL PULL A JUNE 22ND, 1941 ( HITLER INVADING RUSSIA ! ) HOPING TO BUY TIME WE MAY HAVE A WW 3, HAPPY NEW YEAR PUTIN MAY GO BIOLOGICAL ALSO USING FOG OF WAR COVID 19 × 1000 IN POTENCY !                  \n",
              "170831  Prediction for this year Russia will invade Ukraine in January China will invade Twain in late spring or summer and Covid will still be here this time next year.                                                                                                                                   \n",
              "170832  Yes! For sure. Standing up for America. He would never have left anyone in Afghanistan. Russia wouldn't invade...well anyone. No one would mess with Isreal. They would be too afraid of the firestorm that would rain down. twitter.com/SebGorka/statu…                                            \n",
              "170833  #Russia owns #Cuba and #Venezuela. #Putin wants to own #Ukraine. A KGB always a KGB. Putin is a dictator, and dictators invade, nobody questions because 'mysteriously\" had an accident. twitter.com/AlCardenasFL_D… https://t.co/WqjXgZfJxy                                                        \n",
              "170834  @RALee85 No, Russia will go all the way. There is no partial solution to these. If they invade they will take all of Ukraine.\\n\\nBong                                                                                                                                                               \n",
              "\n",
              "                                  renderedContent_y  \n",
              "0       (0.0, 0.0)                                   \n",
              "1       (0.0, 1.0)                                   \n",
              "2       (0.3, 0.2)                                   \n",
              "3       (-0.30000000000000004, 0.2)                  \n",
              "4       (-0.01339285714285715, 0.6116071428571428)   \n",
              "...                                            ...   \n",
              "170830  (0.3234848484848485, 0.5181818181818182)     \n",
              "170831  (-0.15, 0.3)                                 \n",
              "170832  (-0.08611111111111111, 0.45055555555555554)  \n",
              "170833  (0.26666666666666666, 0.7000000000000001)    \n",
              "170834  (0.05, 0.3)                                  \n",
              "\n",
              "[170835 rows x 2 columns]"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "result"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K5gefiCUcC0s"
      },
      "outputs": [],
      "source": [
        "senti =[]\n",
        "for x in result['renderedContent_y']:\n",
        "  if x.polarity > 0:\n",
        "   senti.append('positive')\n",
        "  elif x.polarity == 0:\n",
        "   senti.append('neutral')\n",
        "  else:\n",
        "    senti.append('negative')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0WF_mmEGko9P"
      },
      "outputs": [],
      "source": [
        "senti_re=pd.Series(senti)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "T82-YHdCpzyH",
        "outputId": "7e777456-37c0-4b0b-88a9-f9bfd9edf7bc"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-1ca9bc9a-5ef1-44ca-ab30-1efc47286bd8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170830</th>\n",
              "      <td>170830</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170831</th>\n",
              "      <td>170831</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170832</th>\n",
              "      <td>170832</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170833</th>\n",
              "      <td>170833</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170834</th>\n",
              "      <td>170834</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>170835 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ca9bc9a-5ef1-44ca-ab30-1efc47286bd8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1ca9bc9a-5ef1-44ca-ab30-1efc47286bd8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1ca9bc9a-5ef1-44ca-ab30-1efc47286bd8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "         index         0\n",
              "0       0       neutral \n",
              "1       1       neutral \n",
              "2       2       positive\n",
              "3       3       negative\n",
              "4       4       negative\n",
              "...    ..            ...\n",
              "170830  170830  positive\n",
              "170831  170831  negative\n",
              "170832  170832  negative\n",
              "170833  170833  positive\n",
              "170834  170834  positive\n",
              "\n",
              "[170835 rows x 2 columns]"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "senti_re.reset_index()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gCepL722oqb3"
      },
      "outputs": [],
      "source": [
        "final_df=result.merge(senti_re.rename('Sentiment'),left_index=True,right_index=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "sUGwdTfyqtGE",
        "outputId": "4563697a-77ab-4d97-bfe6-95049bc36e5e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-34675b1b-3278-40c8-ab30-26017fef54da\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>renderedContent_x</th>\n",
              "      <th>renderedContent_y</th>\n",
              "      <th>Sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE PUTIN DECIDES TO INVADE RUSSIA 🤣🤣🤣😭😭😂😂\\nPEOPLE VOTED FOR THIS GUY 🤣🤣🤣 https://t.co/FOHozS7vYI</td>\n",
              "      <td>(0.0, 0.0)</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>@ProfPaulPoast He doesn’t have to like it but it’s up to those countries who are sovereign and now have a proven valid concern that he would invade again. Talk about “legitimate security concerns.” The only legitimate security concerns in this equation are from Ukraine/Russia’s neighbors.</td>\n",
              "      <td>(0.0, 1.0)</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>@SemproniusT @RichardHanania And if NATO is the aggressor then maybe Russia should declare war on NATO. That would be a hoot! Instead they decided to invade a weaker neighbor unprovoked, and they aren’t finding it to be as much fun as they thought.</td>\n",
              "      <td>(0.3, 0.2)</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>@jakehase @Groutandgo @MysticAura_ @SkylarJordan @AlexTyrrellPVQ Zelensky was not put in power by a coup. Ukraine doesn't want Russia in Ukraine. No one forced Russia to invade. Russia made a decision and now they're paying for it.</td>\n",
              "      <td>(-0.30000000000000004, 0.2)</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>@2_4_5T_2_4_D @carolecadwalla @estellecostanza Or is your point that Ukraine asking NATO and the EU for help against Russia would have happened anyway (I mean, its not like Russia are going to invade Ukraine, right?)</td>\n",
              "      <td>(-0.01339285714285715, 0.6116071428571428)</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34675b1b-3278-40c8-ab30-26017fef54da')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-34675b1b-3278-40c8-ab30-26017fef54da button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-34675b1b-3278-40c8-ab30-26017fef54da');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                                                                                                                                                                                                                                                                   renderedContent_x  \\\n",
              "0  JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE PUTIN DECIDES TO INVADE RUSSIA 🤣🤣🤣😭😭😂😂\\nPEOPLE VOTED FOR THIS GUY 🤣🤣🤣 https://t.co/FOHozS7vYI                                                                                                                                                         \n",
              "1  @ProfPaulPoast He doesn’t have to like it but it’s up to those countries who are sovereign and now have a proven valid concern that he would invade again. Talk about “legitimate security concerns.” The only legitimate security concerns in this equation are from Ukraine/Russia’s neighbors.   \n",
              "2  @SemproniusT @RichardHanania And if NATO is the aggressor then maybe Russia should declare war on NATO. That would be a hoot! Instead they decided to invade a weaker neighbor unprovoked, and they aren’t finding it to be as much fun as they thought.                                            \n",
              "3  @jakehase @Groutandgo @MysticAura_ @SkylarJordan @AlexTyrrellPVQ Zelensky was not put in power by a coup. Ukraine doesn't want Russia in Ukraine. No one forced Russia to invade. Russia made a decision and now they're paying for it.                                                             \n",
              "4  @2_4_5T_2_4_D @carolecadwalla @estellecostanza Or is your point that Ukraine asking NATO and the EU for help against Russia would have happened anyway (I mean, its not like Russia are going to invade Ukraine, right?)                                                                            \n",
              "\n",
              "                            renderedContent_y Sentiment  \n",
              "0  (0.0, 0.0)                                  neutral   \n",
              "1  (0.0, 1.0)                                  neutral   \n",
              "2  (0.3, 0.2)                                  positive  \n",
              "3  (-0.30000000000000004, 0.2)                 negative  \n",
              "4  (-0.01339285714285715, 0.6116071428571428)  negative  "
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "final_df.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MErl4hn63opI"
      },
      "outputs": [],
      "source": [
        "final_df.rename(columns = {\"renderedContent_x\": \"Tweets\"},\n",
        "          inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_oJ-obqIipRZ"
      },
      "outputs": [],
      "source": [
        "db2=pd.DataFrame(final_df)\n",
        "filename2='tweets_training.csv'\n",
        "db2.to_csv(filename2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "edu8Q43LiMYl"
      },
      "source": [
        "### Naive bayes training on dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sFZeKT2NQ7Ja",
        "outputId": "299998f0-953b-4452-add7-c3279e8b0ca8"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2882: DtypeWarning: Columns (0,1,2,3) have mixed types.Specify dtype option on import or set low_memory=False.\n",
            "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
          ]
        }
      ],
      "source": [
        "nbc = pd.read_csv('/content/tweets_training.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ALozY5IV5Wuf"
      },
      "outputs": [],
      "source": [
        "nbc = nbc.drop(['Unnamed: 0','renderedContent_y'], axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "F-xp_65LVVNx",
        "outputId": "5faf0e5d-0101-4d4e-defa-ef52c9cc31fc"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-0cc6e5d7-9c38-46bd-83de-b33d51da62db\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweets</th>\n",
              "      <th>Sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE PUTIN DECIDES TO INVADE RUSSIA 🤣🤣🤣😭😭😂😂\\nPEOPLE VOTED FOR THIS GUY 🤣🤣🤣 https://t.co/FOHozS7vYI</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>@ProfPaulPoast He doesn’t have to like it but it’s up to those countries who are sovereign and now have a proven valid concern that he would invade again. Talk about “legitimate security concerns.” The only legitimate security concerns in this equation are from Ukraine/Russia’s neighbors.</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>@SemproniusT @RichardHanania And if NATO is the aggressor then maybe Russia should declare war on NATO. That would be a hoot! Instead they decided to invade a weaker neighbor unprovoked, and they aren’t finding it to be as much fun as they thought.</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>@jakehase @Groutandgo @MysticAura_ @SkylarJordan @AlexTyrrellPVQ Zelensky was not put in power by a coup. Ukraine doesn't want Russia in Ukraine. No one forced Russia to invade. Russia made a decision and now they're paying for it.</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>@2_4_5T_2_4_D @carolecadwalla @estellecostanza Or is your point that Ukraine asking NATO and the EU for help against Russia would have happened anyway (I mean, its not like Russia are going to invade Ukraine, right?)</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cc6e5d7-9c38-46bd-83de-b33d51da62db')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0cc6e5d7-9c38-46bd-83de-b33d51da62db button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0cc6e5d7-9c38-46bd-83de-b33d51da62db');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                                                                                                                                                                                                                                                                              Tweets  \\\n",
              "0  JOE BIDEN SAYS HOW DO WE GET TO A PLACE WHERE PUTIN DECIDES TO INVADE RUSSIA 🤣🤣🤣😭😭😂😂\\nPEOPLE VOTED FOR THIS GUY 🤣🤣🤣 https://t.co/FOHozS7vYI                                                                                                                                                         \n",
              "1  @ProfPaulPoast He doesn’t have to like it but it’s up to those countries who are sovereign and now have a proven valid concern that he would invade again. Talk about “legitimate security concerns.” The only legitimate security concerns in this equation are from Ukraine/Russia’s neighbors.   \n",
              "2  @SemproniusT @RichardHanania And if NATO is the aggressor then maybe Russia should declare war on NATO. That would be a hoot! Instead they decided to invade a weaker neighbor unprovoked, and they aren’t finding it to be as much fun as they thought.                                            \n",
              "3  @jakehase @Groutandgo @MysticAura_ @SkylarJordan @AlexTyrrellPVQ Zelensky was not put in power by a coup. Ukraine doesn't want Russia in Ukraine. No one forced Russia to invade. Russia made a decision and now they're paying for it.                                                             \n",
              "4  @2_4_5T_2_4_D @carolecadwalla @estellecostanza Or is your point that Ukraine asking NATO and the EU for help against Russia would have happened anyway (I mean, its not like Russia are going to invade Ukraine, right?)                                                                            \n",
              "\n",
              "  Sentiment  \n",
              "0  neutral   \n",
              "1  neutral   \n",
              "2  positive  \n",
              "3  negative  \n",
              "4  negative  "
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nbc.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FZhzkugoO8Os",
        "outputId": "ac8bf329-150e-4b08-c6e2-4813894d6046"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Posiive 66162\n",
            "Negative 45904\n",
            "Neutral 58765\n"
          ]
        }
      ],
      "source": [
        "nbc_pos = nbc[nbc['Sentiment'] == 'positive']\n",
        "nbc_neut = nbc[nbc['Sentiment']== 'neutral']\n",
        "nbc_neg = nbc[nbc['Sentiment'] == 'negative']\n",
        "print(\"Posiive\",len(nbc_pos))\n",
        "print(\"Negative\",len(nbc_neg))\n",
        "print(\"Neutral\",len(nbc_neut))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hdvs6P1KiLI3",
        "outputId": "5c18e4ed-f9eb-4097-e698-300b286c3812"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "170831"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nbc_new = pd.concat([nbc_pos, nbc_neg,nbc_neut])\n",
        "len(nbc_new)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "T7Oj-lh4XqHm",
        "outputId": "9c5d31b1-5a5d-4f60-cf82-ec04acaf3ffd"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-08b393c1-f325-4f5b-a7fc-b5220387c51a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweets</th>\n",
              "      <th>Sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>@SemproniusT @RichardHanania And if NATO is the aggressor then maybe Russia should declare war on NATO. That would be a hoot! Instead they decided to invade a weaker neighbor unprovoked, and they aren’t finding it to be as much fun as they thought.</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>@RussianEmbassy @OlafScholz @KremlinRussia_E @mfa_russia @RusBotschaft @GermanEmbassy @BBCWorld @ftworldnews @guardianworld @TelegraphWorld @REESOxford @MailOnline Main threat in Ukraine is your agression. It's a shame that prosecuting and killing his own citizens was not enough for Putin, so he decided to invade and kill Ukrainians. The only hope is that one day he will face his own Nuremberg, for Politkovskaya, for Nemtsov, for Ukrainians</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>@Resist47231614 @laurenboebert Brilliant, \"Ukraine is a country in Europe. It exists next to another country called Russia. Russia is a bigger country. Russia is a powerful country. Russia decided to invade a smaller country called Ukraine. So basically, that’s wrong,”</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Allows Russia to invade Ukraine through weakness\\nCauses inflation to climb uncontrollably by distroying our energy independence\\nWon't secure our borders while saying that Ukraines borders are important\\n\\nDo I  support Trump easy answer is\\nYES</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>@Khaledwasel74x @spectatorindex This is about punishing Russia economically to the point that it is no longer capable of funding its military and thus can't further invade Europe in the future. They have a lot of nukes so direct military intervention is off the table. If we could blow their shit up we would.</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08b393c1-f325-4f5b-a7fc-b5220387c51a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-08b393c1-f325-4f5b-a7fc-b5220387c51a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-08b393c1-f325-4f5b-a7fc-b5220387c51a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                                                                                                                                                                                                                                                                                                                                                                                                                                          Tweets  \\\n",
              "2   @SemproniusT @RichardHanania And if NATO is the aggressor then maybe Russia should declare war on NATO. That would be a hoot! Instead they decided to invade a weaker neighbor unprovoked, and they aren’t finding it to be as much fun as they thought.                                                                                                                                                                                                       \n",
              "8   @RussianEmbassy @OlafScholz @KremlinRussia_E @mfa_russia @RusBotschaft @GermanEmbassy @BBCWorld @ftworldnews @guardianworld @TelegraphWorld @REESOxford @MailOnline Main threat in Ukraine is your agression. It's a shame that prosecuting and killing his own citizens was not enough for Putin, so he decided to invade and kill Ukrainians. The only hope is that one day he will face his own Nuremberg, for Politkovskaya, for Nemtsov, for Ukrainians   \n",
              "14  @Resist47231614 @laurenboebert Brilliant, \"Ukraine is a country in Europe. It exists next to another country called Russia. Russia is a bigger country. Russia is a powerful country. Russia decided to invade a smaller country called Ukraine. So basically, that’s wrong,”                                                                                                                                                                                  \n",
              "15  Allows Russia to invade Ukraine through weakness\\nCauses inflation to climb uncontrollably by distroying our energy independence\\nWon't secure our borders while saying that Ukraines borders are important\\n\\nDo I  support Trump easy answer is\\nYES                                                                                                                                                                                                         \n",
              "18  @Khaledwasel74x @spectatorindex This is about punishing Russia economically to the point that it is no longer capable of funding its military and thus can't further invade Europe in the future. They have a lot of nukes so direct military intervention is off the table. If we could blow their shit up we would.                                                                                                                                          \n",
              "\n",
              "   Sentiment  \n",
              "2   positive  \n",
              "8   positive  \n",
              "14  positive  \n",
              "15  positive  \n",
              "18  positive  "
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nbc_new.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nQMbAfOJVwzX"
      },
      "outputs": [],
      "source": [
        "token = TweetTokenizer(reduce_len=True)\n",
        "\n",
        "data = []\n",
        "\n",
        "# Separating our features (text) and our labels into two lists to smoothen our work\n",
        "X = nbc_new['Tweets'].tolist()\n",
        "Y = nbc_new['Sentiment'].tolist()\n",
        "\n",
        "# Building data list, that is a list of tuples, where each tuple is a pair of the tokenized text\n",
        "# and its corresponding label\n",
        "X = nbc_new['Tweets'].tolist()\n",
        "Y = nbc_new['Sentiment'].tolist()\n",
        "\n",
        "for x, y in zip(X, Y):\n",
        "    if y == 'positive':\n",
        "        data.append((token.tokenize(x), 1))\n",
        "    elif y == 'neutral':\n",
        "      data.append((token.tokenize(x), 0.5))\n",
        "    else:\n",
        "        data.append((token.tokenize(x), 0))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B7JFwF_RXf22",
        "outputId": "c443abc0-1871-48a0-d517-b53c183b0d06"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[('@SemproniusT', 'NN'), ('@RichardHanania', 'NN'), ('And', 'CC'), ('if', 'IN'), ('NATO', 'NNP'), ('is', 'VBZ'), ('the', 'DT'), ('aggressor', 'NN'), ('then', 'RB'), ('maybe', 'RB'), ('Russia', 'NNP'), ('should', 'MD'), ('declare', 'VB'), ('war', 'NN'), ('on', 'IN'), ('NATO', 'NNP'), ('.', '.'), ('That', 'DT'), ('would', 'MD'), ('be', 'VB'), ('a', 'DT'), ('hoot', 'NN'), ('!', '.'), ('Instead', 'RB'), ('they', 'PRP'), ('decided', 'VBD'), ('to', 'TO'), ('invade', 'VB'), ('a', 'DT'), ('weaker', 'JJR'), ('neighbor', 'NN'), ('unprovoked', 'VBD'), (',', ','), ('and', 'CC'), ('they', 'PRP'), ('aren', 'VBP'), ('’', 'JJ'), ('t', 'NN'), ('finding', 'VBG'), ('it', 'PRP'), ('to', 'TO'), ('be', 'VB'), ('as', 'RB'), ('much', 'JJ'), ('fun', 'NN'), ('as', 'IN'), ('they', 'PRP'), ('thought', 'VBD'), ('.', '.')]\n"
          ]
        }
      ],
      "source": [
        "# Previewing the pos_tag() output\n",
        "print(pos_tag(data[0][0]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u6NFouShYjJY",
        "outputId": "a877c8e1-4c6e-46e8-821f-4b11147e76ab"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['@SemproniusT', '@RichardHanania', 'And', 'if', 'NATO', 'be', 'the', 'aggressor', 'then', 'maybe', 'Russia', 'should', 'declare', 'war', 'on', 'NATO', '.', 'That', 'would', 'be', 'a', 'hoot', '!', 'Instead', 'they', 'decide', 'to', 'invade', 'a', 'weak', 'neighbor', 'unprovoked', ',', 'and', 'they', 'aren', '’', 't', 'find', 'it', 'to', 'be', 'as', 'much', 'fun', 'as', 'they', 'think', '.']\n"
          ]
        }
      ],
      "source": [
        "def lemmatize_sentence(tokens):\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    lemmatized_sentence = []\n",
        "    for word, tag in pos_tag(tokens):\n",
        "        # First, we will convert the pos_tag output tags to a tag format that the WordNetLemmatizer can interpret\n",
        "        # In general, if a tag starts with NN, the word is a noun and if it stars with VB, the word is a verb.\n",
        "        if tag.startswith('NN'):\n",
        "            pos = 'n'\n",
        "        elif tag.startswith('VB'):\n",
        "            pos = 'v'\n",
        "        else:\n",
        "            pos = 'a'\n",
        "        lemmatized_sentence.append(lemmatizer.lemmatize(word, pos))\n",
        "    return lemmatized_sentence\n",
        "\n",
        "# Previewing the WordNetLemmatizer() output\n",
        "print(lemmatize_sentence(data[0][0]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1Z7ZDcG9YmpO"
      },
      "outputs": [],
      "source": [
        "# Stopwords are frequently-used words (such as “the”, “a”, “an”, “in”) that do not hold any meaning useful to extract sentiment.\n",
        "from nltk.corpus import stopwords\n",
        "STOP_WORDS = stopwords.words('english')\n",
        "\n",
        "# A custom function defined in order to fine-tune the cleaning of the input text. This function is highly dependent on each usecase.\n",
        "# Only includes misspelling or abbreviations of commonly used words. Including many minimally present cases would negatively impact the performance.\n",
        "def cleaned(token):\n",
        "    if token == 'u':\n",
        "        return 'you'\n",
        "    if token == 'r':\n",
        "        return 'are'\n",
        "    if token == 'some1':\n",
        "        return 'someone'\n",
        "    if token == 'yrs':\n",
        "        return 'years'\n",
        "    if token == 'hrs':\n",
        "        return 'hours'\n",
        "    if token == 'mins':\n",
        "        return 'minutes'\n",
        "    if token == 'secs':\n",
        "        return 'seconds'\n",
        "    if token == 'pls' or token == 'plz':\n",
        "        return 'please'\n",
        "    if token == '2morow':\n",
        "        return 'tomorrow'\n",
        "    if token == '2day':\n",
        "        return 'today'\n",
        "    if token == '4got' or token == '4gotten':\n",
        "        return 'forget'\n",
        "    if token == 'amp' or token == 'quot' or token == 'lt' or token == 'gt' or token == '½25':\n",
        "        return ''\n",
        "    return token\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6gb0UrKP5Yzm"
      },
      "outputs": [],
      "source": [
        "#Function will be our all-in-one noise removal function\n",
        "def remove_noise(tweet_tokens):\n",
        "\n",
        "    cleaned_tokens = []\n",
        "\n",
        "    for token, tag in pos_tag(tweet_tokens):\n",
        "        # Eliminating the token if it is a link\n",
        "        token = re.sub('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+#]|[!*\\(\\),]|'\\\n",
        "                       '(?:%[0-9a-fA-F][0-9a-fA-F]))+','', token)\n",
        "        # Eliminating the token if it is a mention\n",
        "        token = re.sub(\"(@[A-Za-z0-9_]+)\",\"\", token)\n",
        "\n",
        "        if tag.startswith(\"NN\"):\n",
        "            pos = 'n'\n",
        "        elif tag.startswith('VB'):\n",
        "            pos = 'v'\n",
        "        else:\n",
        "            pos = 'a'\n",
        "\n",
        "        lemmatizer = WordNetLemmatizer()\n",
        "        token = lemmatizer.lemmatize(token, pos)\n",
        "\n",
        "        cleaned_token = cleaned(token.lower())\n",
        "\n",
        "        # Eliminating the token if its length is less than 3, if it is a punctuation or if it is a stopword\n",
        "        if cleaned_token not in string.punctuation and len(cleaned_token) > 2 and cleaned_token not in STOP_WORDS:\n",
        "            cleaned_tokens.append(cleaned_token)\n",
        "\n",
        "    return cleaned_tokens\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1xkNrVXr5Yzn",
        "outputId": "54f18e36-b1e0-4083-8727-1c97948c0c9d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['nato', 'aggressor', 'maybe', 'russia', 'declare', 'war', 'nato', 'would', 'hoot', 'instead', 'decide', 'invade', 'weak', 'neighbor', 'unprovoked', 'find', 'much', 'fun', 'think']\n"
          ]
        }
      ],
      "source": [
        "# Prevewing the remove_noise() output\n",
        "print(remove_noise(data[0][0]))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C0pC5D2L5Yzp",
        "outputId": "e00e1efa-b125-4ea2-a41d-538efda98a20"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[({'aggressor': True,\n",
              "   'decide': True,\n",
              "   'declare': True,\n",
              "   'find': True,\n",
              "   'fun': True,\n",
              "   'hoot': True,\n",
              "   'instead': True,\n",
              "   'invade': True,\n",
              "   'maybe': True,\n",
              "   'much': True,\n",
              "   'nato': True,\n",
              "   'neighbor': True,\n",
              "   'russia': True,\n",
              "   'think': True,\n",
              "   'unprovoked': True,\n",
              "   'war': True,\n",
              "   'weak': True,\n",
              "   'would': True},\n",
              "  1),\n",
              " ({'agression': True,\n",
              "   'citizen': True,\n",
              "   'day': True,\n",
              "   'decide': True,\n",
              "   'enough': True,\n",
              "   'face': True,\n",
              "   'hope': True,\n",
              "   'invade': True,\n",
              "   'kill': True,\n",
              "   'main': True,\n",
              "   'nemtsov': True,\n",
              "   'nuremberg': True,\n",
              "   'one': True,\n",
              "   'politkovskaya': True,\n",
              "   'prosecute': True,\n",
              "   'putin': True,\n",
              "   'shame': True,\n",
              "   'threat': True,\n",
              "   'ukraine': True,\n",
              "   'ukrainians': True},\n",
              "  1),\n",
              " ({'another': True,\n",
              "   'basically': True,\n",
              "   'big': True,\n",
              "   'brilliant': True,\n",
              "   'call': True,\n",
              "   'country': True,\n",
              "   'decide': True,\n",
              "   'europe': True,\n",
              "   'exist': True,\n",
              "   'invade': True,\n",
              "   'next': True,\n",
              "   'powerful': True,\n",
              "   'russia': True,\n",
              "   'small': True,\n",
              "   'ukraine': True,\n",
              "   'wrong': True},\n",
              "  1),\n",
              " ({'allows': True,\n",
              "   'answer': True,\n",
              "   'border': True,\n",
              "   'causes': True,\n",
              "   'climb': True,\n",
              "   'distroying': True,\n",
              "   'easy': True,\n",
              "   'energy': True,\n",
              "   'important': True,\n",
              "   'independence': True,\n",
              "   'inflation': True,\n",
              "   'invade': True,\n",
              "   'russia': True,\n",
              "   'say': True,\n",
              "   'secure': True,\n",
              "   'support': True,\n",
              "   'trump': True,\n",
              "   'ukraine': True,\n",
              "   'ukraines': True,\n",
              "   'uncontrollably': True,\n",
              "   'weakness': True,\n",
              "   'yes': True},\n",
              "  1),\n",
              " ({'blow': True,\n",
              "   \"can't\": True,\n",
              "   'capable': True,\n",
              "   'could': True,\n",
              "   'direct': True,\n",
              "   'economically': True,\n",
              "   'europe': True,\n",
              "   'fund': True,\n",
              "   'future': True,\n",
              "   'intervention': True,\n",
              "   'invade': True,\n",
              "   'long': True,\n",
              "   'lot': True,\n",
              "   'military': True,\n",
              "   'nuke': True,\n",
              "   'point': True,\n",
              "   'punish': True,\n",
              "   'russia': True,\n",
              "   'shit': True,\n",
              "   'table': True,\n",
              "   'thus': True,\n",
              "   'would': True},\n",
              "  1)]"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# As the Naive Bayesian classifier accepts inputs in a dict-like structure,\n",
        "#function that transforms our data into the required input structure\n",
        "def list_to_dict(cleaned_tokens):\n",
        "    return dict([token, True] for token in cleaned_tokens)\n",
        "\n",
        "cleaned_tokens_list = []\n",
        "\n",
        "# Removing noise from all the data\n",
        "for tokens, label in data:\n",
        "    cleaned_tokens_list.append((remove_noise(tokens), label))\n",
        "\n",
        "\n",
        "final_data = []\n",
        "\n",
        "# Transforming the data to fit the input structure of the Naive Bayesian classifier\n",
        "for tokens, label in cleaned_tokens_list:\n",
        "    final_data.append((list_to_dict(tokens), label))\n",
        "\n",
        "# Previewing our final (tokenized, cleaned and lemmatized) data list\n",
        "final_data[:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vv323R5jx26j"
      },
      "outputs": [],
      "source": [
        "# As data is currently ordered by label, we have to shuffle it before splitting it\n",
        "# .Random(140) randomizes our data with seed = 140. This guarantees the same shuffling for every execution of our code\n",
        "random.Random(140).shuffle(final_data)\n",
        "\n",
        "# 90% train data\n",
        "trim_index = int(len(final_data) * 0.9)\n",
        "\n",
        "\n",
        "\n",
        "train_data = final_data[:trim_index]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ou1wqbHqAJkC"
      },
      "source": [
        "### Testing on scraped tweets\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z_fZLP3nANYv"
      },
      "outputs": [],
      "source": [
        "nbc2 = pd.read_csv('/content/tweets_scraped_testing.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 624
        },
        "id": "HYYJwP5uCjyr",
        "outputId": "66abea10-9fa4-4979-c5a2-881cccba4587"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-6bcca1b3-1f61-4590-95a0-4fa94569ab35\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>text</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>@KremlinRussia_E President Putin of  russia  is  on right path in ukraine war . We are with you  .</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>RT @Liberty4Ever1: Russia spending an estimated $900 million a day on Ukraine war https://t.co/ldm04I9K55 The problem is Russia rakes in ab…</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>As bombs fall on Ukraine, many European governments are waking up to the sorry state of their own civil defenses. https://t.co/4oOJThCACp</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>RT @washingtonpost: A tremendous surge in VPN downloads in Russia represents a challenge to Putin and his version of the Ukraine war. \\nhttp…</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>RT @SpencerGuard: There is only a few hours to Russia's “Victory Day” parade &amp;amp; Putin's speech (noon in Moscow). There can only be lies. Put…</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>69</td>\n",
              "      <td>@JuliaDavisNews @amagickeagle999 The Great Patriotic War has been redefined inside Russia with scant mention of the… https://t.co/3XlBlkExpA</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>70</td>\n",
              "      <td>RT @ForeignPolicy: Switzerland is less exposed than the Nordic countries are to Russian influence. But it, too, feels the need to move more…</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>71</td>\n",
              "      <td>https://t.co/4Sc0mY2nu5</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>72</td>\n",
              "      <td>RT @AP: In Romania, Jill Biden heard heartbreaking stories from Ukrainian women who fled Russia’s war and found safe haven across the borde…</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>73</td>\n",
              "      <td>RT @MaximeBernier: The longer this war lasts, the more disastrous consequences it has on Ukrainians and the whole world, especially food sh…</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6bcca1b3-1f61-4590-95a0-4fa94569ab35')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6bcca1b3-1f61-4590-95a0-4fa94569ab35 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6bcca1b3-1f61-4590-95a0-4fa94569ab35');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    Unnamed: 0  \\\n",
              "0   0            \n",
              "1   1            \n",
              "2   2            \n",
              "3   3            \n",
              "4   4            \n",
              ".. ..            \n",
              "69  69           \n",
              "70  70           \n",
              "71  71           \n",
              "72  72           \n",
              "73  73           \n",
              "\n",
              "                                                                                                                                                text  \\\n",
              "0   @KremlinRussia_E President Putin of  russia  is  on right path in ukraine war . We are with you  .                                                 \n",
              "1   RT @Liberty4Ever1: Russia spending an estimated $900 million a day on Ukraine war https://t.co/ldm04I9K55 The problem is Russia rakes in ab…       \n",
              "2   As bombs fall on Ukraine, many European governments are waking up to the sorry state of their own civil defenses. https://t.co/4oOJThCACp          \n",
              "3   RT @washingtonpost: A tremendous surge in VPN downloads in Russia represents a challenge to Putin and his version of the Ukraine war. \\nhttp…      \n",
              "4   RT @SpencerGuard: There is only a few hours to Russia's “Victory Day” parade &amp; Putin's speech (noon in Moscow). There can only be lies. Put…   \n",
              "..                                                                                                                                               ...   \n",
              "69  @JuliaDavisNews @amagickeagle999 The Great Patriotic War has been redefined inside Russia with scant mention of the… https://t.co/3XlBlkExpA       \n",
              "70  RT @ForeignPolicy: Switzerland is less exposed than the Nordic countries are to Russian influence. But it, too, feels the need to move more…       \n",
              "71  https://t.co/4Sc0mY2nu5                                                                                                                            \n",
              "72  RT @AP: In Romania, Jill Biden heard heartbreaking stories from Ukrainian women who fled Russia’s war and found safe haven across the borde…       \n",
              "73  RT @MaximeBernier: The longer this war lasts, the more disastrous consequences it has on Ukrainians and the whole world, especially food sh…       \n",
              "\n",
              "   sentiment  \n",
              "0   positive  \n",
              "1   neutral   \n",
              "2   positive  \n",
              "3   positive  \n",
              "4   negative  \n",
              "..       ...  \n",
              "69  positive  \n",
              "70  positive  \n",
              "71  neutral   \n",
              "72  positive  \n",
              "73  positive  \n",
              "\n",
              "[74 rows x 3 columns]"
            ]
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nbc2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aTuLpL_yEDQ-"
      },
      "outputs": [],
      "source": [
        "nbc2= nbc2.drop(['Unnamed: 0'],axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NsdD3x9vANY1",
        "outputId": "68b435a0-59fa-4bf0-dae0-96a30eb84140"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Posiive 23\n",
            "Negative 18\n",
            "Neutral 33\n"
          ]
        }
      ],
      "source": [
        "nbc2_pos = nbc2[nbc2['sentiment'] == 'positive']\n",
        "nbc2_neut = nbc2[nbc2['sentiment']== 'neutral']\n",
        "nbc2_neg = nbc2[nbc2['sentiment'] == 'negative']\n",
        "print(\"Posiive\",len(nbc2_pos))\n",
        "print(\"Negative\",len(nbc2_neg))\n",
        "print(\"Neutral\",len(nbc2_neut))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HCd8yOmKANY5",
        "outputId": "c7477b64-6183-47b4-9a75-a5c23cfd9539"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "74"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nbc2_new = pd.concat([nbc2_pos, nbc2_neg,nbc2_neut])\n",
        "len(nbc2_new)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "QPxFEapNANY7",
        "outputId": "0934e5d7-2c89-4c06-e678-972066505e3e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-21562a1f-36a2-4574-9484-ee4a464ad3ed\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>@KremlinRussia_E President Putin of  russia  is  on right path in ukraine war . We are with you  .</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>As bombs fall on Ukraine, many European governments are waking up to the sorry state of their own civil defenses. https://t.co/4oOJThCACp</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>RT @washingtonpost: A tremendous surge in VPN downloads in Russia represents a challenge to Putin and his version of the Ukraine war. \\nhttp…</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>@russelljh @FAO_Peripateric @jeffreymparsons @Abulinixish @RT_com If Putin really wanted a war 😂 he would have done… https://t.co/SJLO4H1sZ5</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>RT @katierogers: “We understand what it takes for the U.S. First Lady to come here during a war, where the military actions are taking plac…</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>Bloodbath on the #WallStreet tomorrow?\\n#Bitcoin #Stocks #stockmarketcrash #economy #war #Russia #Ukraine #Oil… https://t.co/bkZNRrY44l</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>Independent journalists changing the Russia-Ukraine War narrative. Where is the truth? https://t.co/QG0PpYNVKu</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>RT @vadeboncoeur_m: Les Pro Trump qui sont devenus \"évidemment\" des pro Putin.... Donc ça c'est correcte ? Belle gang de \"moutons\" !!!\\nSi T…</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>@TheLumpenprole @theDoc8311 @LPNH War means civilian casualties. Guilt for the killing of civilians in the Donbass… https://t.co/vcaD2LsWps</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>https://t.co/4Sc0mY2nu5</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>74 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21562a1f-36a2-4574-9484-ee4a464ad3ed')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-21562a1f-36a2-4574-9484-ee4a464ad3ed button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-21562a1f-36a2-4574-9484-ee4a464ad3ed');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                                                                                                                             text  \\\n",
              "0   @KremlinRussia_E President Putin of  russia  is  on right path in ukraine war . We are with you  .                                              \n",
              "2   As bombs fall on Ukraine, many European governments are waking up to the sorry state of their own civil defenses. https://t.co/4oOJThCACp       \n",
              "3   RT @washingtonpost: A tremendous surge in VPN downloads in Russia represents a challenge to Putin and his version of the Ukraine war. \\nhttp…   \n",
              "11  @russelljh @FAO_Peripateric @jeffreymparsons @Abulinixish @RT_com If Putin really wanted a war 😂 he would have done… https://t.co/SJLO4H1sZ5    \n",
              "12  RT @katierogers: “We understand what it takes for the U.S. First Lady to come here during a war, where the military actions are taking plac…    \n",
              "..                                                                                                                                           ...    \n",
              "61  Bloodbath on the #WallStreet tomorrow?\\n#Bitcoin #Stocks #stockmarketcrash #economy #war #Russia #Ukraine #Oil… https://t.co/bkZNRrY44l         \n",
              "62  Independent journalists changing the Russia-Ukraine War narrative. Where is the truth? https://t.co/QG0PpYNVKu                                  \n",
              "66  RT @vadeboncoeur_m: Les Pro Trump qui sont devenus \"évidemment\" des pro Putin.... Donc ça c'est correcte ? Belle gang de \"moutons\" !!!\\nSi T…   \n",
              "67  @TheLumpenprole @theDoc8311 @LPNH War means civilian casualties. Guilt for the killing of civilians in the Donbass… https://t.co/vcaD2LsWps     \n",
              "71  https://t.co/4Sc0mY2nu5                                                                                                                         \n",
              "\n",
              "   sentiment  \n",
              "0   positive  \n",
              "2   positive  \n",
              "3   positive  \n",
              "11  positive  \n",
              "12  positive  \n",
              "..       ...  \n",
              "61  neutral   \n",
              "62  neutral   \n",
              "66  neutral   \n",
              "67  neutral   \n",
              "71  neutral   \n",
              "\n",
              "[74 rows x 2 columns]"
            ]
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nbc2_new"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nVBMmxSFANY7"
      },
      "outputs": [],
      "source": [
        "token2 = TweetTokenizer(reduce_len=True)\n",
        "\n",
        "data2 = []\n",
        "\n",
        "# Separating our features (text) and our labels into two lists to smoothen our work\n",
        "X2 = nbc2_new['text'].tolist()\n",
        "Y2 = nbc2_new['sentiment'].tolist()\n",
        "\n",
        "# Building data list, that is a list of tuples, where each tuple is a pair of the tokenized text\n",
        "# and its corresponding label\n",
        "X2 = nbc2_new['text'].tolist()\n",
        "Y2 = nbc2_new['sentiment'].tolist()\n",
        "\n",
        "for x2, y2 in zip(X2, Y2):\n",
        "    if y2 == 'positive':\n",
        "        data2.append((token2.tokenize(x2), 1))\n",
        "    elif y2 == 'neutral':\n",
        "      data2.append((token2.tokenize(x2), 0.5))\n",
        "    else:\n",
        "        data2.append((token2.tokenize(x2), 0))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rLkpXbMrF3Fb",
        "outputId": "f046b893-b72b-422e-ed23-31fa4c5c2253"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[(['@KremlinRussia_E',\n",
              "   'President',\n",
              "   'Putin',\n",
              "   'of',\n",
              "   'russia',\n",
              "   'is',\n",
              "   'on',\n",
              "   'right',\n",
              "   'path',\n",
              "   'in',\n",
              "   'ukraine',\n",
              "   'war',\n",
              "   '.',\n",
              "   'We',\n",
              "   'are',\n",
              "   'with',\n",
              "   'you',\n",
              "   '.'],\n",
              "  1),\n",
              " (['As',\n",
              "   'bombs',\n",
              "   'fall',\n",
              "   'on',\n",
              "   'Ukraine',\n",
              "   ',',\n",
              "   'many',\n",
              "   'European',\n",
              "   'governments',\n",
              "   'are',\n",
              "   'waking',\n",
              "   'up',\n",
              "   'to',\n",
              "   'the',\n",
              "   'sorry',\n",
              "   'state',\n",
              "   'of',\n",
              "   'their',\n",
              "   'own',\n",
              "   'civil',\n",
              "   'defenses',\n",
              "   '.',\n",
              "   'https://t.co/4oOJThCACp'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@washingtonpost',\n",
              "   ':',\n",
              "   'A',\n",
              "   'tremendous',\n",
              "   'surge',\n",
              "   'in',\n",
              "   'VPN',\n",
              "   'downloads',\n",
              "   'in',\n",
              "   'Russia',\n",
              "   'represents',\n",
              "   'a',\n",
              "   'challenge',\n",
              "   'to',\n",
              "   'Putin',\n",
              "   'and',\n",
              "   'his',\n",
              "   'version',\n",
              "   'of',\n",
              "   'the',\n",
              "   'Ukraine',\n",
              "   'war',\n",
              "   '.',\n",
              "   'http',\n",
              "   '…'],\n",
              "  1),\n",
              " (['@russelljh',\n",
              "   '@FAO_Peripateric',\n",
              "   '@jeffreymparsons',\n",
              "   '@Abulinixish',\n",
              "   '@RT_com',\n",
              "   'If',\n",
              "   'Putin',\n",
              "   'really',\n",
              "   'wanted',\n",
              "   'a',\n",
              "   'war',\n",
              "   '😂',\n",
              "   'he',\n",
              "   'would',\n",
              "   'have',\n",
              "   'done',\n",
              "   '…',\n",
              "   'https://t.co/SJLO4H1sZ5'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@katierogers',\n",
              "   ':',\n",
              "   '“',\n",
              "   'We',\n",
              "   'understand',\n",
              "   'what',\n",
              "   'it',\n",
              "   'takes',\n",
              "   'for',\n",
              "   'the',\n",
              "   'U',\n",
              "   '.',\n",
              "   'S',\n",
              "   '.',\n",
              "   'First',\n",
              "   'Lady',\n",
              "   'to',\n",
              "   'come',\n",
              "   'here',\n",
              "   'during',\n",
              "   'a',\n",
              "   'war',\n",
              "   ',',\n",
              "   'where',\n",
              "   'the',\n",
              "   'military',\n",
              "   'actions',\n",
              "   'are',\n",
              "   'taking',\n",
              "   'plac',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@Jumpmasterpsg',\n",
              "   ':',\n",
              "   'Ok',\n",
              "   '...',\n",
              "   'Russia',\n",
              "   'or',\n",
              "   'Ukraine',\n",
              "   '?',\n",
              "   '?',\n",
              "   '?',\n",
              "   'With',\n",
              "   'Pelosi',\n",
              "   ',',\n",
              "   'Schumer',\n",
              "   ',',\n",
              "   'and',\n",
              "   'Jill',\n",
              "   'walking',\n",
              "   'around',\n",
              "   'in',\n",
              "   'a',\n",
              "   '\"',\n",
              "   'war',\n",
              "   '\"',\n",
              "   'zone',\n",
              "   '...',\n",
              "   'something',\n",
              "   \"ain't\",\n",
              "   'right',\n",
              "   '.',\n",
              "   'If',\n",
              "   't',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@thehill',\n",
              "   ':',\n",
              "   'Jill',\n",
              "   'Biden',\n",
              "   'pays',\n",
              "   'surprise',\n",
              "   'visit',\n",
              "   'to',\n",
              "   'Ukraine',\n",
              "   ',',\n",
              "   'meets',\n",
              "   'first',\n",
              "   'lady',\n",
              "   'https://t.co/RkpN8liE7V',\n",
              "   'https://t.co/tN8LsTVGMa'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@anders_aslund',\n",
              "   ':',\n",
              "   'Observations',\n",
              "   'on',\n",
              "   \"Russia's\",\n",
              "   'war',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   '.',\n",
              "   '1',\n",
              "   '.',\n",
              "   'In',\n",
              "   'spite',\n",
              "   'of',\n",
              "   '3',\n",
              "   'weeks',\n",
              "   'of',\n",
              "   'intense',\n",
              "   'Russian',\n",
              "   'attacks',\n",
              "   'in',\n",
              "   'Donbas',\n",
              "   ',',\n",
              "   'the',\n",
              "   'front',\n",
              "   'has',\n",
              "   'bare',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@B52Malmet',\n",
              "   ':',\n",
              "   'Zelenskyy',\n",
              "   'thanked',\n",
              "   'Biden',\n",
              "   'for',\n",
              "   'her',\n",
              "   '“',\n",
              "   'courageous',\n",
              "   'act',\n",
              "   '”',\n",
              "   'and',\n",
              "   'said',\n",
              "   ',',\n",
              "   '“',\n",
              "   'We',\n",
              "   'understand',\n",
              "   'what',\n",
              "   'it',\n",
              "   'takes',\n",
              "   'for',\n",
              "   'the',\n",
              "   'U',\n",
              "   '.',\n",
              "   'S',\n",
              "   '.',\n",
              "   'first',\n",
              "   'lady',\n",
              "   'to',\n",
              "   'come',\n",
              "   'here',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@Delaney_Magic',\n",
              "   ':',\n",
              "   'German',\n",
              "   'Chancellor',\n",
              "   'Olaf',\n",
              "   'Scholz',\n",
              "   'warned',\n",
              "   'that',\n",
              "   'the',\n",
              "   'Russia-Ukraine',\n",
              "   'war',\n",
              "   'would',\n",
              "   'have',\n",
              "   'consequences',\n",
              "   'for',\n",
              "   'food',\n",
              "   'supply',\n",
              "   ',',\n",
              "   'potentially',\n",
              "   'le',\n",
              "   '…'],\n",
              "  1),\n",
              " (['The',\n",
              "   'stage',\n",
              "   'is',\n",
              "   'perfectly',\n",
              "   'set',\n",
              "   'here',\n",
              "   'for',\n",
              "   'a',\n",
              "   'world',\n",
              "   'War',\n",
              "   '3',\n",
              "   'involving',\n",
              "   'nuclear',\n",
              "   'weapons',\n",
              "   '...',\n",
              "   'entire',\n",
              "   'global',\n",
              "   'food',\n",
              "   'chain',\n",
              "   'is',\n",
              "   'disrupted',\n",
              "   '…',\n",
              "   'https://t.co/zKYg2h1pmS'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@Odessa_Journal',\n",
              "   ':',\n",
              "   '#Trudeau',\n",
              "   ':',\n",
              "   'Obviously',\n",
              "   ',',\n",
              "   'Vladimir',\n",
              "   'Putin',\n",
              "   'is',\n",
              "   'responsible',\n",
              "   'for',\n",
              "   'his',\n",
              "   'heinous',\n",
              "   'war',\n",
              "   'crimes',\n",
              "   ',',\n",
              "   'and',\n",
              "   'Canada',\n",
              "   'will',\n",
              "   'continue',\n",
              "   'to',\n",
              "   'support',\n",
              "   'Ukra',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@bqprime',\n",
              "   ':',\n",
              "   'After',\n",
              "   'waiting',\n",
              "   'for',\n",
              "   'months',\n",
              "   'due',\n",
              "   'to',\n",
              "   'the',\n",
              "   'war',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   ',',\n",
              "   'more',\n",
              "   'than',\n",
              "   '40',\n",
              "   'out',\n",
              "   'of',\n",
              "   '56',\n",
              "   'major',\n",
              "   'Indian',\n",
              "   'exporters',\n",
              "   'to',\n",
              "   'Russia',\n",
              "   'have',\n",
              "   'received',\n",
              "   'thei',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@The_IntelHub',\n",
              "   ':',\n",
              "   'The',\n",
              "   'more',\n",
              "   'I',\n",
              "   'watch',\n",
              "   'this',\n",
              "   'video',\n",
              "   'the',\n",
              "   'more',\n",
              "   'I',\n",
              "   'think',\n",
              "   'Russia',\n",
              "   'is',\n",
              "   'willing',\n",
              "   'for',\n",
              "   'a',\n",
              "   'very',\n",
              "   'long',\n",
              "   'drawn',\n",
              "   'out',\n",
              "   'deadly',\n",
              "   'frozen',\n",
              "   'war',\n",
              "   'with',\n",
              "   'Ukraine',\n",
              "   '.',\n",
              "   '…'],\n",
              "  1),\n",
              " (['Pray',\n",
              "   'for',\n",
              "   'Ukraine',\n",
              "   '.',\n",
              "   'Pray',\n",
              "   'for',\n",
              "   'world',\n",
              "   'peace',\n",
              "   '.',\n",
              "   'Wish',\n",
              "   'for',\n",
              "   'the',\n",
              "   'best',\n",
              "   'for',\n",
              "   'Europe',\n",
              "   '.',\n",
              "   \"Russia's\",\n",
              "   'invasion',\n",
              "   'into',\n",
              "   'Ukraine',\n",
              "   'has',\n",
              "   'no',\n",
              "   'base',\n",
              "   '.',\n",
              "   'Hope',\n",
              "   'war',\n",
              "   'will',\n",
              "   'end',\n",
              "   'soon',\n",
              "   '.'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@morphonios',\n",
              "   ':',\n",
              "   'Russia',\n",
              "   'takes',\n",
              "   'more',\n",
              "   'than',\n",
              "   'a',\n",
              "   'quarter',\n",
              "   'of',\n",
              "   'the',\n",
              "   'territory',\n",
              "   'of',\n",
              "   'Ukraine',\n",
              "   'and',\n",
              "   'western',\n",
              "   'media',\n",
              "   'convinces',\n",
              "   'its',\n",
              "   'viewers',\n",
              "   'that',\n",
              "   'Russia',\n",
              "   'is',\n",
              "   'losing',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@RnaudBertrand',\n",
              "   ':',\n",
              "   'Thank',\n",
              "   'you',\n",
              "   '@mystery_dave',\n",
              "   '!',\n",
              "   'This',\n",
              "   'is',\n",
              "   'legendary',\n",
              "   'journalist',\n",
              "   '@johnpilger',\n",
              "   'who',\n",
              "   'wrote',\n",
              "   'this',\n",
              "   'article',\n",
              "   'in',\n",
              "   '2014',\n",
              "   ':',\n",
              "   'https://t.co/JaqHT3Ps…'],\n",
              "  1),\n",
              " (['Andy',\n",
              "   'Vermaut',\n",
              "   'shares',\n",
              "   ':',\n",
              "   \"Russia's\",\n",
              "   'war',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   ':',\n",
              "   'Live',\n",
              "   'updates',\n",
              "   '-',\n",
              "   'CNN',\n",
              "   ':',\n",
              "   \"Russia's\",\n",
              "   'war',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   ':',\n",
              "   'Live',\n",
              "   'updates',\n",
              "   'CNNView',\n",
              "   '…',\n",
              "   '…',\n",
              "   'https://t.co/1TdXcVDkgP'],\n",
              "  1),\n",
              " (['Russian',\n",
              "   'military',\n",
              "   'leaders',\n",
              "   'are',\n",
              "   'as',\n",
              "   'much',\n",
              "   'to',\n",
              "   'blame',\n",
              "   'for',\n",
              "   'the',\n",
              "   'Ukraine',\n",
              "   'invasion',\n",
              "   'as',\n",
              "   'President',\n",
              "   'Vladimir',\n",
              "   'Putin',\n",
              "   '-',\n",
              "   'and',\n",
              "   'both',\n",
              "   'shoul',\n",
              "   '…',\n",
              "   'https://t.co/WFuEtB3NLQ'],\n",
              "  1),\n",
              " (['@JuliaDavisNews',\n",
              "   '@amagickeagle999',\n",
              "   'The',\n",
              "   'Great',\n",
              "   'Patriotic',\n",
              "   'War',\n",
              "   'has',\n",
              "   'been',\n",
              "   'redefined',\n",
              "   'inside',\n",
              "   'Russia',\n",
              "   'with',\n",
              "   'scant',\n",
              "   'mention',\n",
              "   'of',\n",
              "   'the',\n",
              "   '…',\n",
              "   'https://t.co/3XlBlkExpA'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@ForeignPolicy',\n",
              "   ':',\n",
              "   'Switzerland',\n",
              "   'is',\n",
              "   'less',\n",
              "   'exposed',\n",
              "   'than',\n",
              "   'the',\n",
              "   'Nordic',\n",
              "   'countries',\n",
              "   'are',\n",
              "   'to',\n",
              "   'Russian',\n",
              "   'influence',\n",
              "   '.',\n",
              "   'But',\n",
              "   'it',\n",
              "   ',',\n",
              "   'too',\n",
              "   ',',\n",
              "   'feels',\n",
              "   'the',\n",
              "   'need',\n",
              "   'to',\n",
              "   'move',\n",
              "   'more',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@AP',\n",
              "   ':',\n",
              "   'In',\n",
              "   'Romania',\n",
              "   ',',\n",
              "   'Jill',\n",
              "   'Biden',\n",
              "   'heard',\n",
              "   'heartbreaking',\n",
              "   'stories',\n",
              "   'from',\n",
              "   'Ukrainian',\n",
              "   'women',\n",
              "   'who',\n",
              "   'fled',\n",
              "   'Russia',\n",
              "   '’',\n",
              "   's',\n",
              "   'war',\n",
              "   'and',\n",
              "   'found',\n",
              "   'safe',\n",
              "   'haven',\n",
              "   'across',\n",
              "   'the',\n",
              "   'borde',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@MaximeBernier',\n",
              "   ':',\n",
              "   'The',\n",
              "   'longer',\n",
              "   'this',\n",
              "   'war',\n",
              "   'lasts',\n",
              "   ',',\n",
              "   'the',\n",
              "   'more',\n",
              "   'disastrous',\n",
              "   'consequences',\n",
              "   'it',\n",
              "   'has',\n",
              "   'on',\n",
              "   'Ukrainians',\n",
              "   'and',\n",
              "   'the',\n",
              "   'whole',\n",
              "   'world',\n",
              "   ',',\n",
              "   'especially',\n",
              "   'food',\n",
              "   'sh',\n",
              "   '…'],\n",
              "  1),\n",
              " (['RT',\n",
              "   '@SpencerGuard',\n",
              "   ':',\n",
              "   'There',\n",
              "   'is',\n",
              "   'only',\n",
              "   'a',\n",
              "   'few',\n",
              "   'hours',\n",
              "   'to',\n",
              "   \"Russia's\",\n",
              "   '“',\n",
              "   'Victory',\n",
              "   'Day',\n",
              "   '”',\n",
              "   'parade',\n",
              "   '&',\n",
              "   \"Putin's\",\n",
              "   'speech',\n",
              "   '(',\n",
              "   'noon',\n",
              "   'in',\n",
              "   'Moscow',\n",
              "   ')',\n",
              "   '.',\n",
              "   'There',\n",
              "   'can',\n",
              "   'only',\n",
              "   'be',\n",
              "   'lies',\n",
              "   '.',\n",
              "   'Put',\n",
              "   '…'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@AlexKokcharov',\n",
              "   ':',\n",
              "   'In',\n",
              "   '77',\n",
              "   'out',\n",
              "   'of',\n",
              "   '83',\n",
              "   'regions',\n",
              "   'of',\n",
              "   '#Russia',\n",
              "   ',',\n",
              "   'there',\n",
              "   'are',\n",
              "   'wildfires',\n",
              "   'reported',\n",
              "   '.',\n",
              "   'The',\n",
              "   'worst',\n",
              "   'fires',\n",
              "   'are',\n",
              "   'in',\n",
              "   '#Siberia',\n",
              "   ',',\n",
              "   'destroying',\n",
              "   'entire',\n",
              "   'vil',\n",
              "   '…'],\n",
              "  0),\n",
              " (['The',\n",
              "   'media',\n",
              "   '&',\n",
              "   'governments',\n",
              "   'of',\n",
              "   'Ukraine',\n",
              "   ',',\n",
              "   'the',\n",
              "   'US',\n",
              "   '&',\n",
              "   'EU',\n",
              "   'would',\n",
              "   'like',\n",
              "   'you',\n",
              "   'to',\n",
              "   'note',\n",
              "   'the',\n",
              "   '“',\n",
              "   'slow',\n",
              "   'progress',\n",
              "   '”',\n",
              "   'of',\n",
              "   'Russian',\n",
              "   'advances',\n",
              "   'in',\n",
              "   'U',\n",
              "   '…',\n",
              "   'https://t.co/LL3s3KNaM2'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@SecBlinken',\n",
              "   ':',\n",
              "   \"Russia's\",\n",
              "   'forces',\n",
              "   'have',\n",
              "   'committed',\n",
              "   'war',\n",
              "   'crimes',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   ',',\n",
              "   'killed',\n",
              "   'thousands',\n",
              "   'of',\n",
              "   'civilians',\n",
              "   ',',\n",
              "   'and',\n",
              "   'created',\n",
              "   'a',\n",
              "   'humanitarian',\n",
              "   'catastrophe',\n",
              "   '…'],\n",
              "  0),\n",
              " (['@JoshRosner',\n",
              "   '@mfa_russia',\n",
              "   'If',\n",
              "   'you',\n",
              "   'believe',\n",
              "   'Ukrainian',\n",
              "   'propaganda',\n",
              "   ',',\n",
              "   'then',\n",
              "   'Gerasimov',\n",
              "   'has',\n",
              "   'been',\n",
              "   'shot',\n",
              "   'down',\n",
              "   'by',\n",
              "   'Ukraine',\n",
              "   '.',\n",
              "   'You',\n",
              "   'beli',\n",
              "   '…',\n",
              "   'https://t.co/n4JSZ4jQC0'],\n",
              "  0),\n",
              " (['@RepAdamSchiff',\n",
              "   'Also',\n",
              "   'today',\n",
              "   ',',\n",
              "   'Americans',\n",
              "   'are',\n",
              "   'being',\n",
              "   'subjugated',\n",
              "   'to',\n",
              "   'an',\n",
              "   'ideology',\n",
              "   'being',\n",
              "   'forced',\n",
              "   'upon',\n",
              "   'them',\n",
              "   'by',\n",
              "   'foreign',\n",
              "   'intruder',\n",
              "   '…',\n",
              "   'https://t.co/NALIuKl3F3'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@japantimes',\n",
              "   ':',\n",
              "   'About',\n",
              "   '60',\n",
              "   'people',\n",
              "   'were',\n",
              "   'feared',\n",
              "   'dead',\n",
              "   'after',\n",
              "   'a',\n",
              "   'bomb',\n",
              "   'struck',\n",
              "   'a',\n",
              "   'school',\n",
              "   'in',\n",
              "   'eastern',\n",
              "   'Ukraine',\n",
              "   ',',\n",
              "   'authorities',\n",
              "   'said',\n",
              "   ',',\n",
              "   'while',\n",
              "   'Russia',\n",
              "   'prepared',\n",
              "   'f',\n",
              "   '…'],\n",
              "  0),\n",
              " (['Zelensky',\n",
              "   'says',\n",
              "   '‘',\n",
              "   'evil',\n",
              "   'has',\n",
              "   'returned',\n",
              "   '’',\n",
              "   'after',\n",
              "   'Russia',\n",
              "   'bombs',\n",
              "   'school',\n",
              "   '-',\n",
              "   'follow',\n",
              "   'live',\n",
              "   'https://t.co/WwAfSXL3bR'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@nytimes',\n",
              "   ':',\n",
              "   'Dozens',\n",
              "   'of',\n",
              "   'people',\n",
              "   'are',\n",
              "   'feared',\n",
              "   'dead',\n",
              "   'after',\n",
              "   'a',\n",
              "   'Russian',\n",
              "   'airstrike',\n",
              "   'leveled',\n",
              "   'a',\n",
              "   'school',\n",
              "   'in',\n",
              "   'eastern',\n",
              "   'Ukraine',\n",
              "   '.',\n",
              "   'If',\n",
              "   'the',\n",
              "   'death',\n",
              "   'toll',\n",
              "   'is',\n",
              "   'as',\n",
              "   'high',\n",
              "   'a',\n",
              "   '…'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@ivan_8848',\n",
              "   ':',\n",
              "   'Ukraine',\n",
              "   'Alone',\n",
              "   'Makes',\n",
              "   'Biden',\n",
              "   'The',\n",
              "   'Worst',\n",
              "   'US',\n",
              "   'President',\n",
              "   'In',\n",
              "   'A',\n",
              "   'Long',\n",
              "   'Time',\n",
              "   '“',\n",
              "   'We',\n",
              "   '’',\n",
              "   're',\n",
              "   'not',\n",
              "   'just',\n",
              "   'at',\n",
              "   'war',\n",
              "   'to',\n",
              "   'support',\n",
              "   'the',\n",
              "   'Ukrainians',\n",
              "   '.',\n",
              "   'We',\n",
              "   '’',\n",
              "   're',\n",
              "   'fun',\n",
              "   '…'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@blackintheempir',\n",
              "   ':',\n",
              "   'NATO',\n",
              "   'is',\n",
              "   'waging',\n",
              "   'a',\n",
              "   'proxy',\n",
              "   'war',\n",
              "   'with',\n",
              "   'Russia',\n",
              "   'and',\n",
              "   'they',\n",
              "   'chose',\n",
              "   'Ukraine',\n",
              "   'to',\n",
              "   'provide',\n",
              "   'the',\n",
              "   'dead',\n",
              "   'bodies'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@EuromaidanPress',\n",
              "   ':',\n",
              "   'EXPERT',\n",
              "   'OPINION',\n",
              "   ':',\n",
              "   'Supplying',\n",
              "   'UA',\n",
              "   'with',\n",
              "   'heavy',\n",
              "   'weapons',\n",
              "   'would',\n",
              "   'never',\n",
              "   'put',\n",
              "   'NATO',\n",
              "   'in',\n",
              "   'direct',\n",
              "   'confrontation',\n",
              "   'with',\n",
              "   'Russia',\n",
              "   '.',\n",
              "   '1st',\n",
              "   ',',\n",
              "   'becaus',\n",
              "   '…'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@jensstoltenberg',\n",
              "   ':',\n",
              "   'On',\n",
              "   '#VEDay77',\n",
              "   'we',\n",
              "   'thank',\n",
              "   'our',\n",
              "   'armed',\n",
              "   'forces',\n",
              "   'for',\n",
              "   'their',\n",
              "   'service',\n",
              "   '&',\n",
              "   'sacrifice',\n",
              "   '.',\n",
              "   'As',\n",
              "   '#Russia',\n",
              "   '’',\n",
              "   's',\n",
              "   'illegal',\n",
              "   'war',\n",
              "   'in',\n",
              "   '#Ukraine',\n",
              "   'has',\n",
              "   'shattere',\n",
              "   '…'],\n",
              "  0),\n",
              " (['@MaxBlumenthal',\n",
              "   'I',\n",
              "   'would',\n",
              "   'imagine',\n",
              "   'that',\n",
              "   'if',\n",
              "   'it',\n",
              "   'gets',\n",
              "   'that',\n",
              "   'bad',\n",
              "   'for',\n",
              "   'Russia',\n",
              "   ',',\n",
              "   'Putin',\n",
              "   'will',\n",
              "   'declare',\n",
              "   'war',\n",
              "   'and',\n",
              "   'use',\n",
              "   'the',\n",
              "   'full',\n",
              "   'might',\n",
              "   'o',\n",
              "   '…',\n",
              "   'https://t.co/hiwvA8q8Hm'],\n",
              "  0),\n",
              " (['@TBernician',\n",
              "   'Well',\n",
              "   'not',\n",
              "   'surprising',\n",
              "   'the',\n",
              "   'amount',\n",
              "   'of',\n",
              "   'Ukraine',\n",
              "   'propaganda',\n",
              "   'In',\n",
              "   'support',\n",
              "   'of',\n",
              "   'Ukraine',\n",
              "   'on',\n",
              "   'Twitter',\n",
              "   'and',\n",
              "   'western',\n",
              "   'news',\n",
              "   '…',\n",
              "   'https://t.co/bm4BnJdVTM'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@SamRamani2',\n",
              "   ':',\n",
              "   'Taiwan',\n",
              "   'has',\n",
              "   'sanctioned',\n",
              "   'Belarus',\n",
              "   'for',\n",
              "   'its',\n",
              "   '\"',\n",
              "   'active',\n",
              "   'involvement',\n",
              "   '\"',\n",
              "   'in',\n",
              "   'the',\n",
              "   'Ukraine',\n",
              "   'war',\n",
              "   'These',\n",
              "   'sanctions',\n",
              "   ',',\n",
              "   'which',\n",
              "   'mirror',\n",
              "   \"Taiwan's\",\n",
              "   'prior',\n",
              "   '…'],\n",
              "  0),\n",
              " (['@elonmusk',\n",
              "   'Please',\n",
              "   'run',\n",
              "   'for',\n",
              "   'President',\n",
              "   'and',\n",
              "   'stop',\n",
              "   'this',\n",
              "   'war',\n",
              "   'with',\n",
              "   'Russia',\n",
              "   'and',\n",
              "   'Ukraine',\n",
              "   ',',\n",
              "   'the',\n",
              "   'USA',\n",
              "   'is',\n",
              "   'heavily',\n",
              "   'involved',\n",
              "   'helping',\n",
              "   'U',\n",
              "   '…',\n",
              "   'https://t.co/b6Qe259una'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@SkyNewsAust',\n",
              "   ':',\n",
              "   'The',\n",
              "   'Deputy',\n",
              "   'Labor',\n",
              "   'leader',\n",
              "   'said',\n",
              "   'he',\n",
              "   'met',\n",
              "   'with',\n",
              "   'the',\n",
              "   'Chinese',\n",
              "   'ambassador',\n",
              "   'a',\n",
              "   '\"',\n",
              "   'handful',\n",
              "   '\"',\n",
              "   'of',\n",
              "   'times',\n",
              "   '\"',\n",
              "   'over',\n",
              "   'a',\n",
              "   'very',\n",
              "   'long',\n",
              "   'period',\n",
              "   'of',\n",
              "   'time',\n",
              "   '\"',\n",
              "   'in',\n",
              "   '…'],\n",
              "  0),\n",
              " (['RT',\n",
              "   '@Liberty4Ever1',\n",
              "   ':',\n",
              "   'Russia',\n",
              "   'spending',\n",
              "   'an',\n",
              "   'estimated',\n",
              "   '$',\n",
              "   '900',\n",
              "   'million',\n",
              "   'a',\n",
              "   'day',\n",
              "   'on',\n",
              "   'Ukraine',\n",
              "   'war',\n",
              "   'https://t.co/ldm04I9K55',\n",
              "   'The',\n",
              "   'problem',\n",
              "   'is',\n",
              "   'Russia',\n",
              "   'rakes',\n",
              "   'in',\n",
              "   'ab',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@IndianExpress',\n",
              "   ':',\n",
              "   'US',\n",
              "   'President',\n",
              "   '#JoeBiden',\n",
              "   'met',\n",
              "   'with',\n",
              "   'his',\n",
              "   '#G7',\n",
              "   'counterparts',\n",
              "   'and',\n",
              "   '#Ukrainian',\n",
              "   'President',\n",
              "   '#VolodymyrZelenskyy',\n",
              "   'to',\n",
              "   'discuss',\n",
              "   \"#Russia's\",\n",
              "   'w',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@GolosAmeriki',\n",
              "   ':',\n",
              "   'В',\n",
              "   'Запорожье',\n",
              "   'прибыл',\n",
              "   'конвой',\n",
              "   'автобусов',\n",
              "   'со',\n",
              "   '173',\n",
              "   'гражданскими',\n",
              "   'людьми',\n",
              "   'эвакуированными',\n",
              "   'из',\n",
              "   'Мариуполя',\n",
              "   ',',\n",
              "   'среди',\n",
              "   'которых',\n",
              "   'около',\n",
              "   'сорока',\n",
              "   'ч',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@New_Narrative',\n",
              "   ':',\n",
              "   'Russia',\n",
              "   '’',\n",
              "   's',\n",
              "   'ultimate',\n",
              "   'political',\n",
              "   'survivor',\n",
              "   'faces',\n",
              "   'a',\n",
              "   'reckoning',\n",
              "   'over',\n",
              "   'Ukraine',\n",
              "   'war',\n",
              "   '-',\n",
              "   'The',\n",
              "   'Washington',\n",
              "   'Post',\n",
              "   'https://t.co/6fEKUTXYTD'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@gulf_intel',\n",
              "   ':',\n",
              "   '𝗠𝗮𝘀𝗵𝗿𝗲𝗾',\n",
              "   '𝟲𝟬',\n",
              "   '-',\n",
              "   '𝗦𝗲𝗰𝗼𝗻𝗱',\n",
              "   '𝗦𝗼𝘂𝗻𝗱𝗕𝗶𝘁𝗲',\n",
              "   ':',\n",
              "   '\"',\n",
              "   \"Russia's\",\n",
              "   'war',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   'still',\n",
              "   'has',\n",
              "   'Potential',\n",
              "   'to',\n",
              "   'get',\n",
              "   'out',\n",
              "   'of',\n",
              "   'Control',\n",
              "   'with',\n",
              "   'unconventional',\n",
              "   'weapo',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@nytimes',\n",
              "   ':',\n",
              "   'U2',\n",
              "   'frontman',\n",
              "   'Bono',\n",
              "   'visited',\n",
              "   'the',\n",
              "   'grounds',\n",
              "   'of',\n",
              "   'a',\n",
              "   'church',\n",
              "   'in',\n",
              "   'Bucha',\n",
              "   ',',\n",
              "   'Ukraine',\n",
              "   ',',\n",
              "   'where',\n",
              "   'a',\n",
              "   'mass',\n",
              "   'grave',\n",
              "   'was',\n",
              "   'found',\n",
              "   'in',\n",
              "   'March',\n",
              "   'after',\n",
              "   'Russian',\n",
              "   'troops',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['https://t.co/uygkJ5C3mY'], 0.5),\n",
              " (['RT',\n",
              "   '@ajamubaraka',\n",
              "   ':',\n",
              "   'The',\n",
              "   'supposed',\n",
              "   '\"',\n",
              "   'unity',\n",
              "   '\"',\n",
              "   'of',\n",
              "   'the',\n",
              "   'West',\n",
              "   'in',\n",
              "   'relationship',\n",
              "   'to',\n",
              "   'the',\n",
              "   'NATO',\n",
              "   'proxy',\n",
              "   'war',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   'is',\n",
              "   'superficial',\n",
              "   '.',\n",
              "   'German',\n",
              "   'capital',\n",
              "   'is',\n",
              "   'finall',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@himalayaxchange',\n",
              "   ':',\n",
              "   '📰',\n",
              "   'Founder',\n",
              "   'of',\n",
              "   'the',\n",
              "   '#HimalayaExchange',\n",
              "   ',',\n",
              "   'William',\n",
              "   'Je',\n",
              "   'shares',\n",
              "   'his',\n",
              "   'thoughts',\n",
              "   'on',\n",
              "   'the',\n",
              "   'role',\n",
              "   'of',\n",
              "   '#cryptocurrencies',\n",
              "   'during',\n",
              "   'the',\n",
              "   'Ukraine',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@persbog',\n",
              "   ':',\n",
              "   '@ivanastradner',\n",
              "   'What',\n",
              "   'Dugin',\n",
              "   'implies',\n",
              "   'here',\n",
              "   'is',\n",
              "   'that',\n",
              "   'Russia',\n",
              "   'will',\n",
              "   'try',\n",
              "   'to',\n",
              "   'create',\n",
              "   'a',\n",
              "   'land',\n",
              "   'corridor',\n",
              "   'all',\n",
              "   'the',\n",
              "   'way',\n",
              "   'to',\n",
              "   'Serbia',\n",
              "   'and',\n",
              "   'beyond',\n",
              "   'thro',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['@sweetsabinne',\n",
              "   '@Bill_Dewahl',\n",
              "   '@LyndonBowe1',\n",
              "   '@DavidGoliathFrm',\n",
              "   '@elonmusk',\n",
              "   'Because',\n",
              "   'Russia',\n",
              "   'specifically',\n",
              "   'said',\n",
              "   'that',\n",
              "   'if',\n",
              "   'Ukraine',\n",
              "   '…',\n",
              "   'https://t.co/cYUkKQ7g00'],\n",
              "  0.5),\n",
              " (['Russia',\n",
              "   '’',\n",
              "   's',\n",
              "   'ultimate',\n",
              "   'political',\n",
              "   'survivor',\n",
              "   'faces',\n",
              "   'a',\n",
              "   'reckoning',\n",
              "   'over',\n",
              "   'Ukraine',\n",
              "   'war',\n",
              "   '-',\n",
              "   'The',\n",
              "   'Washington',\n",
              "   'Post',\n",
              "   'https://t.co/UGjWm4cHo6'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@60Minutes',\n",
              "   ':',\n",
              "   '“',\n",
              "   'In',\n",
              "   'Russia',\n",
              "   ',',\n",
              "   'art',\n",
              "   'is',\n",
              "   'politics',\n",
              "   '.',\n",
              "   '[',\n",
              "   'The',\n",
              "   ']',\n",
              "   'Russian',\n",
              "   'government',\n",
              "   'use',\n",
              "   '[',\n",
              "   's',\n",
              "   ']',\n",
              "   'ballet',\n",
              "   '…',\n",
              "   'like',\n",
              "   'a',\n",
              "   'weapon',\n",
              "   ',',\n",
              "   '”',\n",
              "   'Oleksii',\n",
              "   'Potiomkin',\n",
              "   ',',\n",
              "   'a',\n",
              "   'principal',\n",
              "   'dancer',\n",
              "   'wi',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@mtracey',\n",
              "   ':',\n",
              "   'Forthright',\n",
              "   'statement',\n",
              "   'of',\n",
              "   'intent',\n",
              "   'here',\n",
              "   'from',\n",
              "   'a',\n",
              "   '\"',\n",
              "   'fellow',\n",
              "   '\"',\n",
              "   'at',\n",
              "   'the',\n",
              "   'UK',\n",
              "   'Ministry',\n",
              "   'of',\n",
              "   \"Defense's\",\n",
              "   'chief',\n",
              "   'think',\n",
              "   'tank',\n",
              "   '.',\n",
              "   'Says',\n",
              "   'no',\n",
              "   'one',\n",
              "   'should',\n",
              "   'be',\n",
              "   'un',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@ronaldfeljones',\n",
              "   ':',\n",
              "   '@JuliaDavisNews',\n",
              "   'And',\n",
              "   'as',\n",
              "   'Timothy',\n",
              "   'Snyder',\n",
              "   '@TimothyDSnyder',\n",
              "   'repeatedly',\n",
              "   'points',\n",
              "   'out',\n",
              "   ',',\n",
              "   'no',\n",
              "   'Soviet',\n",
              "   'republic',\n",
              "   ',',\n",
              "   'including',\n",
              "   'Russia',\n",
              "   ',',\n",
              "   'lost',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@nytimes',\n",
              "   ':',\n",
              "   'Prime',\n",
              "   'Minister',\n",
              "   'Justin',\n",
              "   'Trudeau',\n",
              "   'of',\n",
              "   'Canada',\n",
              "   'has',\n",
              "   'made',\n",
              "   'an',\n",
              "   'unannounced',\n",
              "   'visit',\n",
              "   'to',\n",
              "   'Ukraine',\n",
              "   '.',\n",
              "   'Local',\n",
              "   'officials',\n",
              "   'posted',\n",
              "   'photos',\n",
              "   'of',\n",
              "   'the',\n",
              "   'premier',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@katierogers',\n",
              "   ':',\n",
              "   'Uzhhorod',\n",
              "   ',',\n",
              "   'Ukraine',\n",
              "   '—',\n",
              "   'Jill',\n",
              "   'Biden',\n",
              "   'made',\n",
              "   'an',\n",
              "   'unannounced',\n",
              "   'visit',\n",
              "   'to',\n",
              "   'meet',\n",
              "   'with',\n",
              "   'Olena',\n",
              "   'Zelenska',\n",
              "   ',',\n",
              "   'the',\n",
              "   'wife',\n",
              "   'of',\n",
              "   'the',\n",
              "   'Ukrainian',\n",
              "   'president',\n",
              "   ',',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['@tomfriedman',\n",
              "   'If',\n",
              "   'the',\n",
              "   'US',\n",
              "   'had',\n",
              "   'honored',\n",
              "   'its',\n",
              "   'commitment',\n",
              "   'to',\n",
              "   'the',\n",
              "   'Budapest',\n",
              "   'Memorandum',\n",
              "   'and',\n",
              "   'intervened',\n",
              "   'in',\n",
              "   '2014',\n",
              "   'when',\n",
              "   'Russia',\n",
              "   'inv',\n",
              "   '…',\n",
              "   'https://t.co/nn4Kcl4Ib6'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@BrookingsInst',\n",
              "   ':',\n",
              "   'Join',\n",
              "   'us',\n",
              "   'tomorrow',\n",
              "   'at',\n",
              "   '2',\n",
              "   'PM',\n",
              "   'ET',\n",
              "   'for',\n",
              "   'an',\n",
              "   'update',\n",
              "   'on',\n",
              "   'the',\n",
              "   'Russia-Ukraine',\n",
              "   'war',\n",
              "   'from',\n",
              "   '@JimGoldgeier',\n",
              "   ',',\n",
              "   '@AngelaStent',\n",
              "   ',',\n",
              "   '@steven_pifer',\n",
              "   ',',\n",
              "   'and',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['Survivors',\n",
              "   'of',\n",
              "   'Russian',\n",
              "   'strike',\n",
              "   'on',\n",
              "   'Ukrainian',\n",
              "   'school',\n",
              "   'describe',\n",
              "   'horror',\n",
              "   'https://t.co/tPG2pUlQJe'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@Reuters',\n",
              "   ':',\n",
              "   '‘',\n",
              "   'Stop',\n",
              "   'war',\n",
              "   '’',\n",
              "   ':',\n",
              "   'From',\n",
              "   'Spain',\n",
              "   'to',\n",
              "   'Argentina',\n",
              "   ',',\n",
              "   'artists',\n",
              "   'paint',\n",
              "   'murals',\n",
              "   'to',\n",
              "   'protest',\n",
              "   \"Russia's\",\n",
              "   'invasion',\n",
              "   'of',\n",
              "   'Ukraine',\n",
              "   'https://t.co/4GvfhALUTS'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@calxandr',\n",
              "   ':',\n",
              "   'No',\n",
              "   'moral',\n",
              "   'citizen',\n",
              "   'can',\n",
              "   'pretend',\n",
              "   \"Russia's\",\n",
              "   'war',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   'is',\n",
              "   'peripheral',\n",
              "   ',',\n",
              "   'or',\n",
              "   'claim',\n",
              "   'neutrality',\n",
              "   '.',\n",
              "   'Genocidal',\n",
              "   'aggression',\n",
              "   '&',\n",
              "   'war',\n",
              "   'crimes',\n",
              "   're',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@NikkeiAsia',\n",
              "   ':',\n",
              "   'BREAKING',\n",
              "   '|',\n",
              "   'PM',\n",
              "   'Kishida',\n",
              "   'says',\n",
              "   'Japan',\n",
              "   'will',\n",
              "   'keep',\n",
              "   'stake',\n",
              "   'in',\n",
              "   \"Russia's\",\n",
              "   'Sakhalin',\n",
              "   'oil',\n",
              "   ',',\n",
              "   'gas',\n",
              "   'projects',\n",
              "   '#Russia',\n",
              "   '#Japan',\n",
              "   '#Ukraine',\n",
              "   '#Sakhalin',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['Russia',\n",
              "   'and',\n",
              "   'Ukraine',\n",
              "   ':',\n",
              "   'A',\n",
              "   'War',\n",
              "   'in',\n",
              "   'Europe',\n",
              "   'Shakes',\n",
              "   'the',\n",
              "   'Neighbourhood',\n",
              "   'Watch',\n",
              "   '@SunjoyJ',\n",
              "   'in',\n",
              "   'conversation',\n",
              "   'with',\n",
              "   '@NaghmaSahar',\n",
              "   'for',\n",
              "   '…',\n",
              "   'https://t.co/yRifByQGuk'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@USRealityCheck',\n",
              "   ':',\n",
              "   'An',\n",
              "   'estimated',\n",
              "   '90',\n",
              "   'people',\n",
              "   'were',\n",
              "   'sheltering',\n",
              "   'in',\n",
              "   'the',\n",
              "   'school',\n",
              "   'before',\n",
              "   'it',\n",
              "   'was',\n",
              "   'leveled',\n",
              "   'by',\n",
              "   'Russian',\n",
              "   'bombs',\n",
              "   '.',\n",
              "   'Only',\n",
              "   '27',\n",
              "   'people',\n",
              "   'emerged',\n",
              "   'fro',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['All',\n",
              "   'Eyes',\n",
              "   'on',\n",
              "   'Red',\n",
              "   'Square',\n",
              "   ':',\n",
              "   'Why',\n",
              "   'Victory',\n",
              "   'Day',\n",
              "   'on',\n",
              "   'May',\n",
              "   '9',\n",
              "   'Could',\n",
              "   'Be',\n",
              "   'a',\n",
              "   'Tipping',\n",
              "   'Point',\n",
              "   'In',\n",
              "   'Russia',\n",
              "   '’',\n",
              "   's',\n",
              "   'War',\n",
              "   'Against',\n",
              "   'Ukraine',\n",
              "   '-',\n",
              "   'Securit',\n",
              "   '…',\n",
              "   'https://t.co/sH58ncXKtJ'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@richimedhurst',\n",
              "   ':',\n",
              "   '#Ukraine',\n",
              "   'Is',\n",
              "   'a',\n",
              "   'Proxy',\n",
              "   'War',\n",
              "   'Between',\n",
              "   'the',\n",
              "   'US',\n",
              "   'and',\n",
              "   '#Russia',\n",
              "   'https://t.co/4CmXwgQH5X'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@BBCWorld',\n",
              "   ':',\n",
              "   'War',\n",
              "   'in',\n",
              "   'Ukraine',\n",
              "   ':',\n",
              "   'Zelensky',\n",
              "   'WW2',\n",
              "   'speech',\n",
              "   'accuses',\n",
              "   'Russia',\n",
              "   'of',\n",
              "   'Nazi',\n",
              "   'atrocities',\n",
              "   'https://t.co/ROwxiqGLGW'],\n",
              "  0.5),\n",
              " (['Bloodbath',\n",
              "   'on',\n",
              "   'the',\n",
              "   '#WallStreet',\n",
              "   'tomorrow',\n",
              "   '?',\n",
              "   '#Bitcoin',\n",
              "   '#Stocks',\n",
              "   '#stockmarketcrash',\n",
              "   '#economy',\n",
              "   '#war',\n",
              "   '#Russia',\n",
              "   '#Ukraine',\n",
              "   '#Oil',\n",
              "   '…',\n",
              "   'https://t.co/bkZNRrY44l'],\n",
              "  0.5),\n",
              " (['Independent',\n",
              "   'journalists',\n",
              "   'changing',\n",
              "   'the',\n",
              "   'Russia-Ukraine',\n",
              "   'War',\n",
              "   'narrative',\n",
              "   '.',\n",
              "   'Where',\n",
              "   'is',\n",
              "   'the',\n",
              "   'truth',\n",
              "   '?',\n",
              "   'https://t.co/QG0PpYNVKu'],\n",
              "  0.5),\n",
              " (['RT',\n",
              "   '@vadeboncoeur_m',\n",
              "   ':',\n",
              "   'Les',\n",
              "   'Pro',\n",
              "   'Trump',\n",
              "   'qui',\n",
              "   'sont',\n",
              "   'devenus',\n",
              "   '\"',\n",
              "   'évidemment',\n",
              "   '\"',\n",
              "   'des',\n",
              "   'pro',\n",
              "   'Putin',\n",
              "   '...',\n",
              "   'Donc',\n",
              "   'ça',\n",
              "   \"c'est\",\n",
              "   'correcte',\n",
              "   '?',\n",
              "   'Belle',\n",
              "   'gang',\n",
              "   'de',\n",
              "   '\"',\n",
              "   'moutons',\n",
              "   '\"',\n",
              "   '!',\n",
              "   '!',\n",
              "   '!',\n",
              "   'Si',\n",
              "   'T',\n",
              "   '…'],\n",
              "  0.5),\n",
              " (['@TheLumpenprole',\n",
              "   '@theDoc8311',\n",
              "   '@LPNH',\n",
              "   'War',\n",
              "   'means',\n",
              "   'civilian',\n",
              "   'casualties',\n",
              "   '.',\n",
              "   'Guilt',\n",
              "   'for',\n",
              "   'the',\n",
              "   'killing',\n",
              "   'of',\n",
              "   'civilians',\n",
              "   'in',\n",
              "   'the',\n",
              "   'Donbass',\n",
              "   '…',\n",
              "   'https://t.co/vcaD2LsWps'],\n",
              "  0.5),\n",
              " (['https://t.co/4Sc0mY2nu5'], 0.5)]"
            ]
          },
          "execution_count": 46,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xH-FHLYEANY9",
        "outputId": "12378d66-91c1-412b-dad7-8b5a5c83ef89"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[('@KremlinRussia_E', 'JJ'), ('President', 'NNP'), ('Putin', 'NNP'), ('of', 'IN'), ('russia', 'NN'), ('is', 'VBZ'), ('on', 'IN'), ('right', 'JJ'), ('path', 'NN'), ('in', 'IN'), ('ukraine', 'JJ'), ('war', 'NN'), ('.', '.'), ('We', 'PRP'), ('are', 'VBP'), ('with', 'IN'), ('you', 'PRP'), ('.', '.')]\n"
          ]
        }
      ],
      "source": [
        "# Previewing the pos_tag() output\n",
        "print(pos_tag(data2[0][0]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-CrHju73ANY-",
        "outputId": "c223c662-2fd3-49da-d868-90e378377788"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['@KremlinRussia_E', 'President', 'Putin', 'of', 'russia', 'be', 'on', 'right', 'path', 'in', 'ukraine', 'war', '.', 'We', 'be', 'with', 'you', '.']\n"
          ]
        }
      ],
      "source": [
        "def lemmatize_sentence(tokens):\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    lemmatized_sentence = []\n",
        "    for word, tag in pos_tag(tokens):\n",
        "        # converting the pos_tag output tags to a tag format that the WordNetLemmatizer can interpret\n",
        "        # In general, if a tag starts with NN, the word is a noun and if it stars with VB, the word is a verb.\n",
        "        if tag.startswith('NN'):\n",
        "            pos = 'n'\n",
        "        elif tag.startswith('VB'):\n",
        "            pos = 'v'\n",
        "        else:\n",
        "            pos = 'a'\n",
        "        lemmatized_sentence.append(lemmatizer.lemmatize(word, pos))\n",
        "    return lemmatized_sentence\n",
        "\n",
        "# Previewing the WordNetLemmatizer() output\n",
        "print(lemmatize_sentence(data2[0][0]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yjiCaEb9ANZE",
        "outputId": "f2eff8af-1c7e-4664-b26f-9bba6009e595"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['president', 'putin', 'russia', 'right', 'path', 'ukraine', 'war']\n"
          ]
        }
      ],
      "source": [
        "# Prevewing the remove_noise() output\n",
        "print(remove_noise(data2[0][0]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wlRwUEZVANZF",
        "outputId": "b95bea53-dc74-4bee-ff53-eefb73f3a3be"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[({'path': True,\n",
              "   'president': True,\n",
              "   'putin': True,\n",
              "   'right': True,\n",
              "   'russia': True,\n",
              "   'ukraine': True,\n",
              "   'war': True},\n",
              "  1),\n",
              " ({'bomb': True,\n",
              "   'civil': True,\n",
              "   'defense': True,\n",
              "   'european': True,\n",
              "   'fall': True,\n",
              "   'government': True,\n",
              "   'many': True,\n",
              "   'sorry': True,\n",
              "   'state': True,\n",
              "   'ukraine': True,\n",
              "   'wake': True},\n",
              "  1),\n",
              " ({'challenge': True,\n",
              "   'downloads': True,\n",
              "   'http': True,\n",
              "   'putin': True,\n",
              "   'represent': True,\n",
              "   'russia': True,\n",
              "   'surge': True,\n",
              "   'tremendous': True,\n",
              "   'ukraine': True,\n",
              "   'version': True,\n",
              "   'vpn': True,\n",
              "   'war': True},\n",
              "  1),\n",
              " ({'putin': True, 'really': True, 'want': True, 'war': True, 'would': True},\n",
              "  1),\n",
              " ({'action': True,\n",
              "   'come': True,\n",
              "   'first': True,\n",
              "   'lady': True,\n",
              "   'military': True,\n",
              "   'plac': True,\n",
              "   'take': True,\n",
              "   'understand': True,\n",
              "   'war': True},\n",
              "  1)]"
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# As the Naive Bayesian classifier accepts inputs in a dict-like structure,\n",
        "# function that transforms our data into the required input structure\n",
        "def list_to_dict(cleaned_tokens):\n",
        "    return dict([token, True] for token in cleaned_tokens)\n",
        "\n",
        "cleaned_tokens_list2 = []\n",
        "\n",
        "# Removing noise from all the data\n",
        "for tokens, label in data2:\n",
        "    cleaned_tokens_list2.append((remove_noise(tokens), label))\n",
        "\n",
        "\n",
        "\n",
        "final_data2 = []\n",
        "\n",
        "# Transforming the data to fit the input structure of the Naive Bayesian classifier\n",
        "for tokens, label in cleaned_tokens_list2:\n",
        "    final_data2.append((list_to_dict(tokens), label))\n",
        "\n",
        "\n",
        "\n",
        "# Previewing our final (tokenized, cleaned and lemmatized) data list\n",
        "final_data2[:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RHDHBao-ANZG"
      },
      "outputs": [],
      "source": [
        "\n",
        "# As data is currently ordered by label, we have to shuffle it before splitting it\n",
        "# .Random(140) randomizes our data with seed = 140. This guarantees the same shuffling for every execution of our code\n",
        "random.Random(140).shuffle(final_data2)\n",
        "\n",
        "\n",
        "trim_index = int(len(final_data2) * 0.9)\n",
        "\n",
        "\n",
        "\n",
        "test_data = final_data2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5v6Qa9g55Yzr",
        "outputId": "25c0c3fa-f09c-4901-e46c-9edcb57a55c4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy on train data: 0.9696969696969697\n",
            "Accuracy on test data: 0.9459459459459459\n",
            "\n",
            "CPU Time: 0.028471946716308594\n"
          ]
        }
      ],
      "source": [
        "start_time = time()\n",
        "\n",
        "classifier = NaiveBayesClassifier.train(train_data)\n",
        "\n",
        "print('Accuracy on train data:', classify.accuracy(classifier, train_data))\n",
        "print('Accuracy on test data:', classify.accuracy(classifier, test_data))\n",
        "\n",
        "\n",
        "# print(classifier.show_most_informative_features(20))\n",
        "\n",
        "print('\\nCPU Time:', time() - start_time)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FuSKidEqAXAl"
      },
      "source": [
        "### Custom Tweet Test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fjpEYLuTMylV",
        "outputId": "360ddae3-8311-4ab6-d277-976017cf681c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0\n"
          ]
        }
      ],
      "source": [
        "custom_tweet = \"@SpencerGuard: There is only a few hours to Russia's â€œVictory Dayâ€ parade &amp; Putin's speech (noon in Moscow). There can only be lies. Putâ€¦\"\n",
        "#\"️UN urges reopening of Odesa ports to abate global hunger crisis. The UN World Food Programme said in a statement…\"\n",
        "# \"Russia-Ukraine war: conflict taking ‘heavy toll’ on Russian units, says UK; US defends passing intelligence to Ukra… https://t.co/SZdfUzdQxp\"\n",
        "# \"I loved the show today! It was amazing.\"\n",
        "\n",
        "\n",
        "custom_tokens = remove_noise(token.tokenize(custom_tweet))\n",
        "\n",
        "print(classifier.classify(dict([token, True] for token in custom_tokens)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LtFrcsLYW5iJ"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-38Seq4zW5SF"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xmOeKEllWEep",
        "outputId": "34d80220-8ccb-40f8-e35e-7163a478a5bb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "execution_count": 57,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "type(data2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N_jiUD-EWQgB"
      },
      "outputs": [],
      "source": [
        "data2_df = pd.DataFrame(data2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 319
        },
        "id": "vV0_gU5hWouE",
        "outputId": "7b5467a0-4633-4cab-81dc-d519c536c537"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-f3a87e28-e10c-47c3-a4b2-eccd36cac0f6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[@KremlinRussia_E, President, Putin, of, russia, is, on, right, path, in, ukraine, war, ., We, are, with, you, .]</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[As, bombs, fall, on, Ukraine, ,, many, European, governments, are, waking, up, to, the, sorry, state, of, their, own, civil, defenses, ., https://t.co/4oOJThCACp]</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[RT, @washingtonpost, :, A, tremendous, surge, in, VPN, downloads, in, Russia, represents, a, challenge, to, Putin, and, his, version, of, the, Ukraine, war, ., http, …]</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[@russelljh, @FAO_Peripateric, @jeffreymparsons, @Abulinixish, @RT_com, If, Putin, really, wanted, a, war, 😂, he, would, have, done, …, https://t.co/SJLO4H1sZ5]</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[RT, @katierogers, :, “, We, understand, what, it, takes, for, the, U, ., S, ., First, Lady, to, come, here, during, a, war, ,, where, the, military, actions, are, taking, plac, …]</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3a87e28-e10c-47c3-a4b2-eccd36cac0f6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f3a87e28-e10c-47c3-a4b2-eccd36cac0f6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f3a87e28-e10c-47c3-a4b2-eccd36cac0f6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                                                                                                                                                                      0  \\\n",
              "0  [@KremlinRussia_E, President, Putin, of, russia, is, on, right, path, in, ukraine, war, ., We, are, with, you, .]                                                                      \n",
              "1  [As, bombs, fall, on, Ukraine, ,, many, European, governments, are, waking, up, to, the, sorry, state, of, their, own, civil, defenses, ., https://t.co/4oOJThCACp]                    \n",
              "2  [RT, @washingtonpost, :, A, tremendous, surge, in, VPN, downloads, in, Russia, represents, a, challenge, to, Putin, and, his, version, of, the, Ukraine, war, ., http, …]              \n",
              "3  [@russelljh, @FAO_Peripateric, @jeffreymparsons, @Abulinixish, @RT_com, If, Putin, really, wanted, a, war, 😂, he, would, have, done, …, https://t.co/SJLO4H1sZ5]                       \n",
              "4  [RT, @katierogers, :, “, We, understand, what, it, takes, for, the, U, ., S, ., First, Lady, to, come, here, during, a, war, ,, where, the, military, actions, are, taking, plac, …]   \n",
              "\n",
              "     1  \n",
              "0  1.0  \n",
              "1  1.0  \n",
              "2  1.0  \n",
              "3  1.0  \n",
              "4  1.0  "
            ]
          },
          "execution_count": 61,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data2_df.head(5)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
